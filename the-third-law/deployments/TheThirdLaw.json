{
  "address": "0x591aEB4C7790945dCf339E7462705eb087878D8C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughMines",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTimePassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTorpedoes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFreeEligible",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "NotInvited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourTurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YouAreInThisGame",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "GameOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2Address",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player1Ship",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player2Ship",
              "type": "tuple"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentPlayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "logBlocks",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "free",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct TheThirdLaw.Game",
          "name": "_game",
          "type": "tuple"
        }
      ],
      "name": "GameState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "InviteToGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "JoinGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "OpenGameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "OpenGameJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum LeftOrRight",
          "name": "_leftOrRight",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum UpOrDown",
          "name": "_upOrDown",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Action",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "PlayerInput",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "acceptFreeInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_ratingA",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_ratingB",
          "type": "int256"
        },
        {
          "internalType": "enum Status",
          "name": "_result",
          "type": "uint8"
        }
      ],
      "name": "calculateElo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createOrJoinRandomGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "endGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "forceMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player1Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2Address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Velocity",
              "name": "velocity",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "remainingTorpedoes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingMines",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingFuel",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TheThirdLaw.Torpedo[]",
              "name": "torpedoes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TheThirdLaw.Mine[]",
              "name": "mines",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TheThirdLaw.Ship",
          "name": "player1Ship",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Velocity",
              "name": "velocity",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "remainingTorpedoes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingMines",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingFuel",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TheThirdLaw.Torpedo[]",
              "name": "torpedoes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TheThirdLaw.Mine[]",
              "name": "mines",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TheThirdLaw.Ship",
          "name": "player2Ship",
          "type": "tuple"
        },
        {
          "internalType": "enum Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currentPlayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastTurnTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "free",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllELO",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "eloRating",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.PlayerELO[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2Address",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player1Ship",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player2Ship",
              "type": "tuple"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentPlayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "logBlocks",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "free",
              "type": "bool"
            }
          ],
          "internalType": "struct TheThirdLaw.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "getGamesForPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2Address",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player1Ship",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player2Ship",
              "type": "tuple"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentPlayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "logBlocks",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "free",
              "type": "bool"
            }
          ],
          "internalType": "struct TheThirdLaw.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "inviteIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "victories",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defaultVictories",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defaultLosses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "draws",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "losses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eloRating",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentShipId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gamesStarted",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        }
      ],
      "name": "inviteToFreeGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        }
      ],
      "name": "inviteToGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTorpedoes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mineRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "victories",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defaultVictories",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defaultLosses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "draws",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "losses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eloRating",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentShipId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gamesStarted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "rejectInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameCost",
          "type": "uint256"
        }
      ],
      "name": "setGameCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mineRange",
          "type": "uint256"
        }
      ],
      "name": "setMineRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMines",
          "type": "uint256"
        }
      ],
      "name": "setNumberMines",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTorpedoes",
          "type": "uint256"
        }
      ],
      "name": "setNumberTorpedoes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_torpedoAccel",
          "type": "int256"
        }
      ],
      "name": "setTorpedoAccel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_torpedoFuel",
          "type": "uint256"
        }
      ],
      "name": "setTorpedoFuel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum LeftOrRight",
          "name": "_leftOrRight",
          "type": "uint8"
        },
        {
          "internalType": "enum UpOrDown",
          "name": "_upOrDown",
          "type": "uint8"
        },
        {
          "internalType": "enum Action",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "takeFreeTurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum LeftOrRight",
          "name": "_leftOrRight",
          "type": "uint8"
        },
        {
          "internalType": "enum UpOrDown",
          "name": "_upOrDown",
          "type": "uint8"
        },
        {
          "internalType": "enum Action",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "takeTurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "torpedoAccel",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "torpedoFuel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "torpedoRange",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turnTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x458a9d497d44dcbe3e2bdf1d8ad931456f5000ca97880701f83de7f8b8d89cba",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0x591aEB4C7790945dCf339E7462705eb087878D8C",
    "transactionIndex": 1,
    "gasUsed": "4314126",
    "logsBloom": "0x
    "blockHash": "0x46ec769d7f35d33a7e8ab0494180a5ae2572e016c57a865cbbe729e6a0aca074",
    "transactionHash": "0x458a9d497d44dcbe3e2bdf1d8ad931456f5000ca97880701f83de7f8b8d89cba",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 4788553,
        "transactionHash": "0x458a9d497d44dcbe3e2bdf1d8ad931456f5000ca97880701f83de7f8b8d89cba",
        "address": "0x591aEB4C7790945dCf339E7462705eb087878D8C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x46ec769d7f35d33a7e8ab0494180a5ae2572e016c57a865cbbe729e6a0aca074"
      }
    ],
    "blockNumber": 4788553,
    "cumulativeGasUsed": "4364627",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1b03538850d5997dbd5b14d0ae787837",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughMines\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTimePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTorpedoes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFreeEligible\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"NotInvited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourGame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourTurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouAreInThisGame\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"GameOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"logBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TheThirdLaw.Game\",\"name\":\"_game\",\"type\":\"tuple\"}],\"name\":\"GameState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"InviteToGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"JoinGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"OpenGameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"OpenGameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum LeftOrRight\",\"name\":\"_leftOrRight\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum UpOrDown\",\"name\":\"_upOrDown\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Action\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"PlayerInput\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"acceptFreeInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_ratingA\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_ratingB\",\"type\":\"int256\"},{\"internalType\":\"enum Status\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"calculateElo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createOrJoinRandomGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"forceMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllELO\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eloRating\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.PlayerELO[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"logBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"}],\"internalType\":\"struct TheThirdLaw.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getGamesForPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"logBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"}],\"internalType\":\"struct TheThirdLaw.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inviteIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"victories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultVictories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eloRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentShipId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamesStarted\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"}],\"name\":\"inviteToFreeGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"}],\"name\":\"inviteToGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTorpedoes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"victories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultVictories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eloRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentShipId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamesStarted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"rejectInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameCost\",\"type\":\"uint256\"}],\"name\":\"setGameCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mineRange\",\"type\":\"uint256\"}],\"name\":\"setMineRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMines\",\"type\":\"uint256\"}],\"name\":\"setNumberMines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTorpedoes\",\"type\":\"uint256\"}],\"name\":\"setNumberTorpedoes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_torpedoAccel\",\"type\":\"int256\"}],\"name\":\"setTorpedoAccel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_torpedoFuel\",\"type\":\"uint256\"}],\"name\":\"setTorpedoFuel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum LeftOrRight\",\"name\":\"_leftOrRight\",\"type\":\"uint8\"},{\"internalType\":\"enum UpOrDown\",\"name\":\"_upOrDown\",\"type\":\"uint8\"},{\"internalType\":\"enum Action\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"takeFreeTurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum LeftOrRight\",\"name\":\"_leftOrRight\",\"type\":\"uint8\"},{\"internalType\":\"enum UpOrDown\",\"name\":\"_upOrDown\",\"type\":\"uint8\"},{\"internalType\":\"enum Action\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"takeTurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torpedoAccel\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torpedoFuel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torpedoRange\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TheThirdLaw.sol\":\"TheThirdLaw\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Elo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {FixedPointMathLib as fp} from \\\"./FixedPointMathLib.sol\\\";\\n\\nlibrary Elo {\\n    /// @notice Get the 16th root of a number, used in ELO calculations\\n    /// @dev Elo calculations require the 400th root (10 ^ (x / 400)), however this can be simplified to the 16th root (10 ^ ((x / 25) / 16))\\n    function sixteenthRoot(uint256 x) internal pure returns (uint256) {\\n        return fp.sqrt(fp.sqrt(fp.sqrt(fp.sqrt(x))));\\n    }\\n\\n    /// @notice Calculates the change in ELO rating, after a given outcome.\\n    /// @param ratingA the ELO rating of the player A\\n    /// @param ratingB the ELO rating of the player B\\n    /// @param score the score of the player A, scaled by 100. 100 = win, 50 = draw, 0 = loss\\n    /// @param kFactor the k-factor or development multiplier used to calculate the change in ELO rating. 20 is the typical value\\n    /// @return change the change in ELO rating of player A, with 2 decimals of precision. 1501 = 15.01 ELO change\\n    /// @return negative the directional change of player A's ELO. Opposite sign for player B\\n    function ratingChange(\\n        uint256 ratingA,\\n        uint256 ratingB,\\n        uint256 score,\\n        uint256 kFactor\\n    ) internal pure returns (uint256 change, bool negative) {\\n        uint256 _kFactor; // scaled up `kFactor` by 100\\n        bool _negative = ratingB < ratingA;\\n        uint256 ratingDiff; // absolute value difference between `ratingA` and `ratingB`\\n\\n        unchecked {\\n            // scale up the inputs by a factor of 100\\n            // since our elo math is scaled up by 100 (to avoid low precision integer division)\\n            _kFactor = kFactor * 10_000;\\n            ratingDiff = _negative ? ratingA - ratingB : ratingB - ratingA;\\n        }\\n\\n        // checks against overflow/underflow, discovered via fuzzing\\n        // large rating diffs leads to 10^ratingDiff being too large to fit in a uint256\\n        require(ratingDiff < 1126, \\\"Rating difference too large\\\");\\n        // large rating diffs when applying the scale factor leads to underflow (800 - ratingDiff)\\n        if (_negative) require(ratingDiff < 800, \\\"Rating difference too large\\\");\\n\\n        // ----------------------------------------------------------------------\\n        // Below, we'll be running simplified versions of the following formulas:\\n        // expected score = 1 / (1 + 10 ^ (ratingDiff / 400))\\n        // elo change = kFactor * (score - expectedScore)\\n\\n        uint256 n; // numerator of the power, with scaling, (numerator of `ratingDiff / 400`)\\n        uint256 _powered; // the value of 10 ^ numerator\\n        uint256 powered; // the value of 16th root of 10 ^ numerator (fully resolved 10 ^ (ratingDiff / 400))\\n        uint256 kExpectedScore; // the expected score with K factor distributed\\n        uint256 kScore; // the actual score with K factor distributed\\n\\n        unchecked {\\n            // apply offset of 800 to scale the result by 100\\n            n = _negative ? 800 - ratingDiff : 800 + ratingDiff;\\n\\n            // (x / 400) is the same as ((x / 25) / 16))\\n            _powered = fp.rpow(10, n / 25, 1); // divide by 25 to avoid reach uint256 max\\n            powered = sixteenthRoot(_powered); // x ^ (1 / 16) is the same as 16th root of x\\n\\n            // given `change = kFactor * (score - expectedScore)` we can distribute kFactor to both terms\\n            kExpectedScore = _kFactor / (100 + powered); // both numerator and denominator scaled up by 100\\n            kScore = kFactor * score; // input score is already scaled up by 100\\n\\n            // determines the sign of the ELO change\\n            negative = kScore < kExpectedScore;\\n            change = negative\\n                ? kExpectedScore - kScore\\n                : kScore - kExpectedScore;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3688da519f2bf9f5cedd3e099723e66c9e5f93a60a8d0c004058be689c86339e\",\"license\":\"MIT\"},\"contracts/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2 ** 256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(\\n                mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(\\n                mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(\\n                gt(mod(mul(x, y), denominator), 0),\\n                div(mul(x, y), denominator)\\n            )\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed4a309bdd8f11e3e572591e084c8d9e43c5cc50603e8df018da448ba69a1eb3\",\"license\":\"AGPL-3.0-only\"},\"contracts/TheThirdLaw.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"./Elo.sol\\\";\\n\\n// TODO: Add admin function to cancel games if they're too old, or never start\\n// TODO: Consider requiring someone to join a game before they show up on leaderboard\\n\\nerror ContractPaused();\\nerror NotEnoughFunds();\\nerror NotEnoughTorpedoes();\\nerror NotEnoughMines();\\nerror NotYourTurn();\\nerror NotYourGame();\\nerror GameNotActive();\\nerror AlreadyRegistered();\\nerror NotRegistered(address _playerAddress);\\nerror NotInvited(uint _gameId);\\nerror NotEnoughTimePassed();\\nerror NotFreeEligible();\\nerror YouAreInThisGame();\\nerror OutOfFreeMoves();\\n\\nint constant QUADRANT_SIZE = 15;\\nint constant START_DISTANCE = 12;\\nuint constant ASTEROID_SIZE = 7; // Manhattan distance\\nuint constant NUM_FREE_MOVES = 200;\\nuint constant NUM_FREE_GAMES = 3;\\n\\nint constant K = 1; // K factor\\n\\nenum LeftOrRight {\\n    None,\\n    Left,\\n    Right\\n}\\n\\nenum UpOrDown {\\n    None,\\n    Up,\\n    Down\\n}\\n\\nenum Action {\\n    None,\\n    FireTorpedo,\\n    DropMine\\n}\\n\\nenum Status {\\n    NotStarted,\\n    Player1Destroyed,\\n    Player2Destroyed,\\n    Player1Fled,\\n    Player2Fled,\\n    Draw,\\n    Active,\\n    Over\\n}\\n\\ncontract TheThirdLaw is Ownable {\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    // I expect this to break if it gets big enough\\n    EnumerableMap.AddressToUintMap private addressToELO;\\n\\n    uint public gameCost = 0.001 ether;\\n    uint public feePercent = 10;\\n    uint public feeBalance = 0;\\n\\n    uint public maxTorpedoes = 5;\\n    uint public maxMines = 5;\\n    uint public torpedoFuel = 10;\\n    uint public mineRange = 2;\\n    int public torpedoAccel = 1;\\n    int public torpedoRange = 1;\\n    uint public turnTimeout = 24 hours;\\n\\n    bool public active = true;\\n\\n    // Super savvy players can find this and use it to decide whether or not\\n    // to join an open game\\n    uint openGameId = 0;\\n\\n    mapping(address => Player) public players;\\n\\n    mapping(uint => Game) public games;\\n    uint numGames = 0;\\n\\n    event InviteToGame(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n    event JoinGame(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event OpenGameCreated(\\n        address indexed _player1Address,\\n        uint indexed _gameId\\n    );\\n    event OpenGameJoined(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event GameStarted(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event GameOver(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event PlayerInput(\\n        address indexed _playerAddress,\\n        uint indexed _gameId,\\n        LeftOrRight _leftOrRight,\\n        UpOrDown _upOrDown,\\n        Action _action\\n    );\\n\\n    event GameState(uint indexed _gameId, Game _game);\\n\\n    struct Game {\\n        uint id;\\n        address player1Address;\\n        address player2Address;\\n        Ship player1Ship;\\n        Ship player2Ship;\\n        Status status;\\n        uint value; // Amount to be paid to victor, or split if there is a tie\\n        address currentPlayer; // Set to None if game not started or is over\\n        uint lastTurnTimestamp;\\n        uint round;\\n        uint[] logBlocks;\\n        bool free;\\n        // TODO: CRITICAL -> Add the torpedo and mine stats here and use them so old games stay as expected if changes are made\\n    }\\n\\n    struct Player {\\n        address ownerAddress;\\n        uint[] gameIds;\\n        uint[] inviteIds;\\n        uint victories; // Enemy was destroyed\\n        uint defaultVictories; // Enemy was forced to flee\\n        uint defaultLosses; // Player was forced to flee\\n        uint draws; // Both players ran out of weapons\\n        uint losses; // Player was destroyed\\n        uint eloRating;\\n        uint currentShipId;\\n        uint gamesStarted;\\n    }\\n\\n    struct Ship {\\n        address ownerAddress;\\n        Position position;\\n        Velocity velocity;\\n        uint remainingTorpedoes;\\n        uint remainingMines;\\n        Torpedo[] torpedoes; // Added this line\\n        Mine[] mines; // Added this line\\n    }\\n\\n    struct Torpedo {\\n        Position position;\\n        Velocity velocity;\\n        uint remainingFuel;\\n    }\\n\\n    struct Mine {\\n        Position position;\\n    }\\n\\n    struct Position {\\n        int row;\\n        int col;\\n    }\\n\\n    struct Velocity {\\n        int row;\\n        int col;\\n    }\\n\\n    constructor() {}\\n\\n    // PUBLIC\\n    function createOrJoinRandomGame() public payable isActive {\\n        if (msg.value != gameCost) revert NotEnoughFunds();\\n\\n        if (players[msg.sender].ownerAddress == address(0)) {\\n            _registerPlayer(msg.sender);\\n        }\\n\\n        if (openGameId == 0) {\\n            numGames++;\\n            openGameId = numGames;\\n            games[openGameId].id = openGameId;\\n            games[openGameId].player1Address = msg.sender;\\n            games[openGameId].value = msg.value;\\n            players[msg.sender].gameIds.push(openGameId);\\n            players[msg.sender].inviteIds.push(openGameId); // TODO: This is probably not the best way to handle this\\n\\n            emit OpenGameCreated(msg.sender, openGameId);\\n        } else {\\n            if (msg.sender == games[openGameId].player1Address) {\\n                revert YouAreInThisGame();\\n            }\\n            games[openGameId].player2Address = msg.sender;\\n            games[openGameId].value += msg.value;\\n            players[msg.sender].gameIds.push(openGameId);\\n            players[msg.sender].inviteIds.push(openGameId); // TODO: This is probably not the best way to handle this\\n\\n            _startGame(openGameId);\\n\\n            emit OpenGameJoined(\\n                games[openGameId].player1Address,\\n                msg.sender,\\n                openGameId\\n            );\\n\\n            openGameId = 0;\\n        }\\n    }\\n\\n    function inviteToGame(address _player2Address) public payable isActive {\\n        if (msg.value != gameCost) revert NotEnoughFunds();\\n\\n        _processInvite(_player2Address, false);\\n    }\\n\\n    // TODO: There is a window here where new users can get spammed with invites\\n    // TODO: with minimal cost to the spammer.  Consider adding a cooldown period\\n    function inviteToFreeGame(address _player2Address) public isActive {\\n        if (players[_player2Address].gamesStarted >= NUM_FREE_GAMES) {\\n            revert NotFreeEligible();\\n        }\\n\\n        _processInvite(_player2Address, true);\\n    }\\n\\n    function _processInvite(address _player2Address, bool _free) internal {\\n        if (players[msg.sender].ownerAddress == address(0)) {\\n            _registerPlayer(msg.sender);\\n        }\\n\\n        if (players[_player2Address].ownerAddress == address(0)) {\\n            _registerPlayer(_player2Address);\\n        }\\n\\n        if (_player2Address == msg.sender) {\\n            revert YouAreInThisGame();\\n        }\\n\\n        numGames++;\\n        uint gameId = numGames; // Could optimize here, 3 gas for clarity is better\\n        games[gameId].id = gameId;\\n        games[gameId].player1Address = msg.sender;\\n        games[gameId].player2Address = _player2Address;\\n        games[gameId].value = msg.value;\\n        games[gameId].free = _free;\\n        players[msg.sender].gameIds.push(gameId);\\n        players[_player2Address].gameIds.push(gameId);\\n        players[_player2Address].inviteIds.push(gameId); // TODO: This is probably not the best way to handle this\\n\\n        emit InviteToGame(msg.sender, _player2Address, gameId);\\n    }\\n\\n    function acceptInvite(uint _gameId) public payable {\\n        if (msg.value != gameCost) revert NotEnoughFunds();\\n\\n        _processAcceptInvite(_gameId, false);\\n    }\\n\\n    function acceptFreeInvite(uint _gameId) public {\\n        // Prevent a player with 0 games from playing many free games\\n        if (players[msg.sender].gamesStarted > NUM_FREE_GAMES) {\\n            revert NotFreeEligible();\\n        }\\n\\n        _processAcceptInvite(_gameId, true);\\n    }\\n\\n    function _processAcceptInvite(uint _gameId, bool _free) internal {\\n        if (games[_gameId].player2Address != msg.sender)\\n            revert NotInvited(_gameId);\\n\\n        games[_gameId].value += msg.value;\\n        games[_gameId].free = _free;\\n        players[games[_gameId].player1Address].gamesStarted++;\\n        players[games[_gameId].player2Address].gamesStarted++;\\n\\n        _startGame(_gameId);\\n\\n        emit JoinGame(games[_gameId].player1Address, msg.sender, _gameId);\\n    }\\n\\n    // Prevent spam by refunding the inviter's fee to the game contract if\\n    // the invite is rejected.\\n    function rejectInvite(uint _gameId) public {\\n        if (games[_gameId].player2Address != msg.sender)\\n            revert NotInvited(_gameId);\\n\\n        feeBalance += games[_gameId].value;\\n        games[_gameId].value = 0;\\n\\n        games[_gameId].status = Status.Over;\\n    }\\n\\n    function takeTurn(\\n        uint _gameId,\\n        LeftOrRight _leftOrRight,\\n        UpOrDown _upOrDown,\\n        Action _action\\n    ) public {\\n        Game storage game = games[_gameId];\\n\\n        if (game.status != Status.Active) revert GameNotActive();\\n        if (game.currentPlayer != msg.sender) revert NotYourTurn();\\n\\n        _processTurn(_gameId, _leftOrRight, _upOrDown, _action);\\n    }\\n\\n    function takeFreeTurn(\\n        uint _gameId,\\n        LeftOrRight _leftOrRight,\\n        UpOrDown _upOrDown,\\n        Action _action\\n    ) public {\\n        Game storage game = games[_gameId];\\n\\n        if (!game.free) revert NotFreeEligible();\\n        if (game.status != Status.Active) revert GameNotActive();\\n        if (game.currentPlayer != msg.sender) revert NotYourTurn();\\n\\n        // If there are 200 moves, game is no longer free\\n        // -1 because NUM_FREE_MOVES is iterated in _processTurn\\n        if (game.round == NUM_FREE_MOVES - 1) {\\n            game.free = false;\\n        }\\n\\n        _processTurn(_gameId, _leftOrRight, _upOrDown, _action);\\n    }\\n\\n    // If it's been 5 minutes since the last player's turn, then either player\\n    // can end the game in a draw\\n    // TODO: Audit priority\\n    function endGame(uint _gameId) public {\\n        // Only one of the players in the game can call this function\\n        if (\\n            games[_gameId].player1Address != msg.sender &&\\n            games[_gameId].player2Address != msg.sender\\n        ) revert NotYourGame();\\n\\n        if (games[_gameId].status != Status.Active) revert GameNotActive();\\n\\n        if (block.timestamp - games[_gameId].lastTurnTimestamp < turnTimeout)\\n            revert NotEnoughTimePassed();\\n\\n        _endGame(_gameId, Status.Draw);\\n    }\\n\\n    // If it's been 5 minutes since the last player's turn, the other player\\n    // can force their opponent to move with no input\\n    // TODO: Audit priority\\n    function forceMove(uint _gameId) public {\\n        Game storage game = games[_gameId];\\n\\n        if (game.status != Status.Active) revert GameNotActive();\\n\\n        if (\\n            game.player1Address != msg.sender &&\\n            game.player2Address != msg.sender\\n        ) revert NotYourGame();\\n\\n        if (block.timestamp - game.lastTurnTimestamp < turnTimeout) {\\n            revert NotEnoughTimePassed();\\n        }\\n\\n        _processTurn(_gameId, LeftOrRight.None, UpOrDown.None, Action.None);\\n    }\\n\\n    // INTERNAL\\n\\n    function _processTurn(\\n        uint _gameId,\\n        LeftOrRight _leftOrRight,\\n        UpOrDown _upOrDown,\\n        Action _action\\n    ) internal {\\n        Game storage game = games[_gameId];\\n        Ship storage ship;\\n        Ship storage enemyShip;\\n\\n        if (game.currentPlayer == game.player1Address) {\\n            ship = game.player1Ship;\\n            enemyShip = game.player2Ship;\\n        } else {\\n            ship = game.player2Ship;\\n            enemyShip = game.player1Ship;\\n        }\\n\\n        if (_leftOrRight == LeftOrRight.Left) {\\n            ship.velocity.col -= 1;\\n        } else if (_leftOrRight == LeftOrRight.Right) {\\n            ship.velocity.col += 1;\\n        }\\n\\n        if (_upOrDown == UpOrDown.Up) {\\n            ship.velocity.row -= 1;\\n        } else if (_upOrDown == UpOrDown.Down) {\\n            ship.velocity.row += 1;\\n        }\\n\\n        if (_action == Action.FireTorpedo) {\\n            if (ship.remainingTorpedoes == 0) revert NotEnoughTorpedoes();\\n            ship.remainingTorpedoes -= 1;\\n            ship.torpedoes.push(\\n                Torpedo(\\n                    Position(ship.position.row, ship.position.col),\\n                    Velocity(ship.velocity.row, ship.velocity.col),\\n                    torpedoFuel\\n                )\\n            );\\n        } else if (_action == Action.DropMine) {\\n            if (ship.remainingMines == 0) revert NotEnoughMines();\\n            ship.remainingMines -= 1;\\n            ship.mines.push(\\n                Mine(Position(ship.position.row, ship.position.col))\\n            );\\n        }\\n\\n        _moveShip(ship);\\n        _checkForFleeingBoard(game, ship);\\n        _checkForAsteroidCollision(game, ship);\\n        _checkForMineCollision(game, ship, enemyShip.mines);\\n        _moveTorpedoesTowardsEnemy(game, enemyShip, ship.torpedoes);\\n        game.lastTurnTimestamp = block.timestamp;\\n\\n        // Switch the current player\\n        if (game.currentPlayer == game.player1Address) {\\n            game.currentPlayer = game.player2Address;\\n        } else {\\n            game.currentPlayer = game.player1Address;\\n        }\\n\\n        game.logBlocks.push(block.number);\\n        emit GameState(_gameId, game);\\n        emit PlayerInput(msg.sender, _gameId, _leftOrRight, _upOrDown, _action);\\n        game.round += 1;\\n    }\\n\\n    function _moveShip(Ship storage _ship) internal {\\n        _ship.position.row += _ship.velocity.row;\\n        _ship.position.col += _ship.velocity.col;\\n    }\\n\\n    function _moveTorpedoesTowardsEnemy(\\n        Game storage _game,\\n        Ship storage _enemyShip,\\n        Torpedo[] storage _torpedoes\\n    ) internal {\\n        for (uint i = 0; i < _torpedoes.length; i++) {\\n            if (_torpedoes[i].remainingFuel == 0) {\\n                continue;\\n            } else {\\n                _torpedoes[i].remainingFuel -= 1;\\n\\n                // Calculate relative position\\n                int row_r = _enemyShip.position.row -\\n                    _torpedoes[i].position.row;\\n                int col_r = _enemyShip.position.col -\\n                    _torpedoes[i].position.col;\\n\\n                // Adjust the torpedo's velocity based on relative position\\n                if (row_r > 0) {\\n                    _torpedoes[i].velocity.row += 1;\\n                } else if (row_r < 0) {\\n                    _torpedoes[i].velocity.row -= 1;\\n                }\\n\\n                if (col_r > 0) {\\n                    _torpedoes[i].velocity.col += 1;\\n                } else if (col_r < 0) {\\n                    _torpedoes[i].velocity.col -= 1;\\n                }\\n\\n                // Move the torpedo based on its velocity\\n                _torpedoes[i].position.row += _torpedoes[i].velocity.row;\\n                _torpedoes[i].position.col += _torpedoes[i].velocity.col;\\n\\n                // If the torpedo is within 1 square of the enemy ship, it hits and the game is over\\n                // Use row and column, not manhattan distance\\n                if (\\n                    abs(_torpedoes[i].position.row - _enemyShip.position.row) <=\\n                    torpedoRange &&\\n                    abs(_torpedoes[i].position.col - _enemyShip.position.col) <=\\n                    torpedoRange\\n                ) {\\n                    if (_enemyShip.ownerAddress == _game.player1Address) {\\n                        _endGame(_game.id, Status.Player1Destroyed);\\n                    } else {\\n                        _endGame(_game.id, Status.Player2Destroyed);\\n                    }\\n                }\\n\\n                // Check for collisions with asteroid\\n                if (\\n                    _manhattanDistance(\\n                        _torpedoes[i].position,\\n                        Position(0, 0)\\n                    ) <= ASTEROID_SIZE\\n                ) {\\n                    _torpedoes[i].remainingFuel = 0;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkForAsteroidCollision(\\n        Game storage _game,\\n        Ship storage _ship\\n    ) internal {\\n        if (\\n            _manhattanDistance(_ship.position, Position(0, 0)) <= ASTEROID_SIZE\\n        ) {\\n            // This player has hit an asteroid and lost\\n            if (_ship.ownerAddress == _game.player1Address) {\\n                _endGame(_game.id, Status.Player1Destroyed);\\n            } else {\\n                _endGame(_game.id, Status.Player2Destroyed);\\n            }\\n        }\\n    }\\n\\n    function _checkForMineCollision(\\n        Game storage _game,\\n        Ship storage _ship,\\n        Mine[] storage _enemyMines\\n    ) internal {\\n        for (uint i = 0; i < _enemyMines.length; i++) {\\n            if (\\n                _manhattanDistance(_ship.position, _enemyMines[i].position) <=\\n                mineRange\\n            ) {\\n                // This player has hit a mine and lost\\n                if (_ship.ownerAddress == _game.player1Address) {\\n                    _endGame(_game.id, Status.Player1Destroyed);\\n                } else {\\n                    _endGame(_game.id, Status.Player2Destroyed);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkForFleeingBoard(\\n        Game storage _game,\\n        Ship storage _ship\\n    ) internal {\\n        if (\\n            abs(_ship.position.row) > QUADRANT_SIZE ||\\n            abs(_ship.position.col) > QUADRANT_SIZE\\n        ) {\\n            // This player has fled the board and lost\\n            if (_ship.ownerAddress == _game.player1Address) {\\n                _endGame(_game.id, Status.Player1Fled);\\n            } else {\\n                _endGame(_game.id, Status.Player2Fled);\\n            }\\n        }\\n    }\\n\\n    // THIS MUST BE AUDITED!!!\\n    function _endGame(uint _gameId, Status _status) internal {\\n        Game storage game = games[_gameId];\\n        game.status = _status;\\n        game.currentPlayer = address(0);\\n\\n        if (_status == Status.Player1Destroyed) {\\n            players[game.player2Address].victories += 1;\\n            players[game.player1Address].losses += 1;\\n\\n            // Pay the victor\\n            uint payout = game.value;\\n            game.value = 0;\\n            payable(game.player2Address).transfer(payout);\\n        } else if (_status == Status.Player2Destroyed) {\\n            players[game.player1Address].victories += 1;\\n            players[game.player2Address].losses += 1;\\n\\n            // Pay the victor\\n            uint payout = game.value;\\n            game.value = 0;\\n            payable(game.player1Address).transfer(payout);\\n            game.value = 0;\\n        } else if (_status == Status.Player1Fled) {\\n            players[game.player2Address].defaultVictories += 1;\\n            players[game.player1Address].defaultLosses += 1;\\n\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay the victor 75% of the game value\\n            uint payout = (balance * 75) / 100;\\n            payable(game.player2Address).transfer(payout);\\n            balance -= payout;\\n\\n            // Add the remaining 25% to the contract's fee balance\\n            feeBalance += balance;\\n        } else if (_status == Status.Player2Fled) {\\n            players[game.player1Address].defaultVictories += 1;\\n            players[game.player2Address].defaultLosses += 1;\\n\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay the victor 75% of the game value\\n            uint payout = (balance * 75) / 100;\\n            payable(game.player1Address).transfer(payout);\\n            balance -= payout;\\n\\n            // Add the remaining 25% to the contract's fee balance\\n            feeBalance += balance;\\n        } else if (_status == Status.Draw) {\\n            players[game.player1Address].draws += 1;\\n            players[game.player2Address].draws += 1;\\n\\n            // Split the game value between the players\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay each player 50% of the game value\\n            uint payout = balance / 2;\\n            payable(game.player1Address).transfer(payout);\\n            balance -= payout;\\n            payable(game.player2Address).transfer(balance);\\n        }\\n\\n        // No ELO change if you play yourself!\\n        if (game.player1Address != game.player2Address) {\\n            (uint newRating1, uint newRating2) = calculateElo(\\n                int(players[game.player1Address].eloRating),\\n                int(players[game.player2Address].eloRating),\\n                _status\\n            );\\n\\n            players[game.player1Address].eloRating = newRating1;\\n            players[game.player2Address].eloRating = newRating2;\\n\\n            addressToELO.set(game.player1Address, newRating1);\\n            addressToELO.set(game.player2Address, newRating2);\\n        }\\n\\n        emit GameOver(game.player1Address, game.player2Address, _gameId);\\n    }\\n\\n    // TODO: I don't understand how K factor works.  Recommended was 32 or 20, but that gave drastic results\\n    // 1 seems to work well initially, don't know what will happen later\\n    // TODO: CRITICAL -> Understand and validate max rating differences!\\n    // TODO: Find a more elegant way to handle than blocking games\\n    // TODO: This may be expensive\\n    // TODO: Investigate consequenses of gaming this with multiple games and choosing when to end/lose\\n    // TODO: Decide to only do 50 or 75% ELO change if one player flees\\n    // Calculate the new ELO ratings of two players\\n    // TODO: This is probably abusable since we allow players to play themselves\\n    function calculateElo(\\n        int _ratingA,\\n        int _ratingB,\\n        Status _result\\n    ) public pure returns (uint, uint) {\\n        // DEBUG IGNORE EDGE CASE\\n\\n        // If the ratings are too far apart, don't change them\\n        if (abs(_ratingA - _ratingB) > 800) {\\n            return (uint(_ratingA), uint(_ratingB));\\n        }\\n\\n        // END DEBUG IGNORE EDGE CASE\\n\\n        uint resultValue;\\n\\n        if (\\n            _result == Status.Player2Destroyed || _result == Status.Player2Fled\\n        ) {\\n            resultValue = 100;\\n        } else if (\\n            _result == Status.Player1Destroyed || _result == Status.Player1Fled\\n        ) {\\n            resultValue = 0;\\n        } else if (_result == Status.Draw) {\\n            resultValue = 50;\\n        } else {\\n            revert(\\\"Invalid result\\\");\\n        }\\n\\n        (uint256 change, bool negative) = Elo.ratingChange(\\n            uint(_ratingA),\\n            uint(_ratingB),\\n            resultValue,\\n            uint(K)\\n        );\\n\\n        int newRatingA;\\n        int newRatingB;\\n\\n        if (negative) {\\n            newRatingA = _ratingA - int(change);\\n            newRatingB = _ratingB + int(change);\\n        } else {\\n            newRatingA = _ratingA + int(change);\\n            newRatingB = _ratingB - int(change);\\n        }\\n\\n        if (newRatingA < 0) {\\n            newRatingA = 0;\\n        }\\n\\n        if (newRatingB < 0) {\\n            newRatingB = 0;\\n        }\\n        // It shouldn't be possible for ELO to get above maxIint without me being so rich I don't care :D\\n\\n        return (uint(newRatingA), uint(newRatingB));\\n    }\\n\\n    function _registerPlayer(address _player) internal {\\n        if (players[_player].ownerAddress != address(0))\\n            revert AlreadyRegistered();\\n        players[_player] = Player(\\n            _player,\\n            new uint[](0),\\n            new uint[](0),\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1200,\\n            0,\\n            0\\n        );\\n\\n        addressToELO.set(_player, 1200);\\n    }\\n\\n    function _startGame(uint _gameId) internal {\\n        Ship storage player1Ship = games[_gameId].player1Ship;\\n        Ship storage player2Ship = games[_gameId].player2Ship;\\n\\n        // Player 1 starts on left side, can be top or bottom\\n        // They start on the top if the block number is even and on the bottom if it's odd\\n        int player1Row = int(block.number) % 2 == 0 ? int(1) : -1;\\n\\n        player1Ship.ownerAddress = games[_gameId].player1Address;\\n        player1Ship.position = Position(\\n            START_DISTANCE * player1Row,\\n            -START_DISTANCE\\n        );\\n        player1Ship.velocity = Velocity(0, 0);\\n        player1Ship.remainingTorpedoes = maxTorpedoes;\\n        player1Ship.remainingMines = maxMines;\\n\\n        // Player 2 starts on right side, can be top or bottom, based on timestamp\\n        int player2Row = int(block.timestamp) % 2 == 0 ? int(1) : -1;\\n\\n        player2Ship.ownerAddress = games[_gameId].player2Address;\\n        player2Ship.position = Position(\\n            START_DISTANCE * player2Row,\\n            START_DISTANCE\\n        );\\n        player2Ship.velocity = Velocity(0, 0);\\n        player2Ship.remainingTorpedoes = maxTorpedoes;\\n        player2Ship.remainingMines = maxMines;\\n\\n        // Assuming torpedoes and mines arrays start empty, there's no need to initialize them\\n\\n        // Flip a coin and set the starting player\\n        if (block.prevrandao % 2 == 0) {\\n            games[_gameId].currentPlayer = games[_gameId].player1Address;\\n        } else {\\n            games[_gameId].currentPlayer = games[_gameId].player2Address;\\n        }\\n\\n        games[_gameId].status = Status.Active;\\n\\n        // Take the fee from the game value and add it to the contract's fee balance\\n        uint fee = (games[_gameId].value * feePercent) / 100;\\n        feeBalance += fee;\\n        games[_gameId].value -= fee;\\n\\n        emit GameStarted(\\n            games[_gameId].player1Address,\\n            games[_gameId].player2Address,\\n            _gameId\\n        );\\n    }\\n\\n    // UTILS\\n\\n    function _manhattanDistance(\\n        Position memory _position1,\\n        Position memory _position2\\n    ) internal pure returns (uint) {\\n        return\\n            uint(\\n                abs(_position1.row - _position2.row) +\\n                    abs(_position1.col - _position2.col)\\n            );\\n    }\\n\\n    function abs(int _x) internal pure returns (int) {\\n        if (_x < 0) {\\n            return -_x;\\n        } else {\\n            return _x;\\n        }\\n    }\\n\\n    // VIEWS\\n\\n    // TODO: Do these need some kind of pagination?\\n    // function getGames() public view returns (Game[] memory) {\\n    //     return games;\\n    // }\\n\\n    function getGamesForPlayer(\\n        address _playerAddress\\n    ) public view returns (Game[] memory) {\\n        uint[] memory gameIds = players[_playerAddress].gameIds;\\n        Game[] memory playerGames = new Game[](gameIds.length);\\n        for (uint i = 0; i < gameIds.length; i++) {\\n            playerGames[i] = games[gameIds[i]];\\n        }\\n        return playerGames;\\n    }\\n\\n    function getPlayer(\\n        address _playerAddress\\n    ) public view returns (Player memory) {\\n        return players[_playerAddress];\\n    }\\n\\n    function getGame(uint _gameId) public view returns (Game memory) {\\n        return games[_gameId];\\n    }\\n\\n    struct PlayerELO {\\n        address playerAddress;\\n        uint eloRating;\\n    }\\n\\n    function getAllELO() external view returns (PlayerELO[] memory) {\\n        PlayerELO[] memory playerELOs = new PlayerELO[](addressToELO.length());\\n        for (uint i = 0; i < addressToELO.length(); i++) {\\n            (address playerAddress, uint elo) = addressToELO.at(i);\\n            playerELOs[i] = PlayerELO(playerAddress, elo);\\n        }\\n        return playerELOs;\\n    }\\n\\n    // MODIFIERS\\n\\n    modifier isActive() {\\n        if (!active) revert ContractPaused();\\n        _;\\n    }\\n\\n    // ADMIN\\n\\n    function setGameCost(uint _gameCost) public onlyOwner {\\n        gameCost = _gameCost;\\n    }\\n\\n    function setFeePercent(uint _feePercent) public onlyOwner {\\n        feePercent = _feePercent;\\n    }\\n\\n    function setNumberTorpedoes(uint _maxTorpedoes) public onlyOwner {\\n        maxTorpedoes = _maxTorpedoes;\\n    }\\n\\n    function setNumberMines(uint _maxMines) public onlyOwner {\\n        maxMines = _maxMines;\\n    }\\n\\n    function setTorpedoFuel(uint _torpedoFuel) public onlyOwner {\\n        torpedoFuel = _torpedoFuel;\\n    }\\n\\n    function setMineRange(uint _mineRange) public onlyOwner {\\n        mineRange = _mineRange;\\n    }\\n\\n    function setTorpedoAccel(int _torpedoAccel) public onlyOwner {\\n        torpedoAccel = _torpedoAccel;\\n    }\\n\\n    function pause() public onlyOwner {\\n        active = false;\\n    }\\n\\n    function withdrawFee() public onlyOwner {\\n        payable(msg.sender).transfer(feeBalance);\\n        feeBalance = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4373f1cdaeb601674351852c956f2b662132e9ede0f07357ba246f6a9301f52b\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2417,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "addressToELO",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressToUintMap)900_storage"
      },
      {
        "astId": 2420,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "gameCost",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2423,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "feePercent",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2426,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "feeBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2429,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "maxTorpedoes",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2432,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "maxMines",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2435,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "torpedoFuel",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2438,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "mineRange",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2441,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "torpedoAccel",
        "offset": 0,
        "slot": "11",
        "type": "t_int256"
      },
      {
        "astId": 2444,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "torpedoRange",
        "offset": 0,
        "slot": "12",
        "type": "t_int256"
      },
      {
        "astId": 2447,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "turnTimeout",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2450,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "active",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2453,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "openGameId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2458,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "players",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(Player)2588_storage)"
      },
      {
        "astId": 2463,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "games",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(Game)2563_storage)"
      },
      {
        "astId": 2466,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "numGames",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Mine)2622_storage)dyn_storage": {
        "base": "t_struct(Mine)2622_storage",
        "encoding": "dynamic_array",
        "label": "struct TheThirdLaw.Mine[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Torpedo)2618_storage)dyn_storage": {
        "base": "t_struct(Torpedo)2618_storage",
        "encoding": "dynamic_array",
        "label": "struct TheThirdLaw.Torpedo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Status)2408": {
        "encoding": "inplace",
        "label": "enum Status",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Player)2588_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TheThirdLaw.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)2588_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Game)2563_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheThirdLaw.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)2563_storage"
      },
      "t_struct(AddressToUintMap)900_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 899,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)150_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)1597_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1596,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1403_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)150_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 145,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)1597_storage"
          },
          {
            "astId": 149,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Game)2563_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Game",
        "members": [
          {
            "astId": 2536,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2538,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player1Address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2540,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player2Address",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2543,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player1Ship",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Ship)2609_storage"
          },
          {
            "astId": 2546,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player2Ship",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Ship)2609_storage"
          },
          {
            "astId": 2549,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "status",
            "offset": 0,
            "slot": "21",
            "type": "t_enum(Status)2408"
          },
          {
            "astId": 2551,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "value",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 2553,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "currentPlayer",
            "offset": 0,
            "slot": "23",
            "type": "t_address"
          },
          {
            "astId": 2555,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "lastTurnTimestamp",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 2557,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "round",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          },
          {
            "astId": 2560,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "logBlocks",
            "offset": 0,
            "slot": "26",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2562,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "free",
            "offset": 0,
            "slot": "27",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "896"
      },
      "t_struct(Mine)2622_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Mine",
        "members": [
          {
            "astId": 2621,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Position)2627_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Player)2588_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Player",
        "members": [
          {
            "astId": 2565,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2568,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "gameIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2571,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "inviteIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2573,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "victories",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2575,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "defaultVictories",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2577,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "defaultLosses",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2579,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "draws",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2581,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "losses",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2583,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "eloRating",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2585,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "currentShipId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 2587,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "gamesStarted",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Position)2627_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Position",
        "members": [
          {
            "astId": 2624,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 2626,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "col",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1403_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1398,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1402,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Ship)2609_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Ship",
        "members": [
          {
            "astId": 2590,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2593,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Position)2627_storage"
          },
          {
            "astId": 2596,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "velocity",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Velocity)2632_storage"
          },
          {
            "astId": 2598,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingTorpedoes",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2600,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingMines",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2604,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "torpedoes",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Torpedo)2618_storage)dyn_storage"
          },
          {
            "astId": 2608,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "mines",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Mine)2622_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Torpedo)2618_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Torpedo",
        "members": [
          {
            "astId": 2612,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Position)2627_storage"
          },
          {
            "astId": 2615,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "velocity",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Velocity)2632_storage"
          },
          {
            "astId": 2617,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingFuel",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Velocity)2632_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Velocity",
        "members": [
          {
            "astId": 2629,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 2631,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "col",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}