{
  "address": "0xE133b7A0e285dC522ddaaaB1b2A288A9e30e5AbB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughMines",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTimePassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTorpedoes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "NotInvited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourTurn",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "GameOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "InviteToGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "JoinGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "OpenGameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "OpenGameJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_ratingA",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_ratingB",
          "type": "int256"
        },
        {
          "internalType": "enum Status",
          "name": "_result",
          "type": "uint8"
        }
      ],
      "name": "calculateElo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createOrJoinRandomGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "endGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "forceMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player1Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2Address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Velocity",
              "name": "velocity",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "remainingTorpedoes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingMines",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingFuel",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TheThirdLaw.Torpedo[]",
              "name": "torpedoes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TheThirdLaw.Mine[]",
              "name": "mines",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TheThirdLaw.Ship",
          "name": "player1Ship",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Velocity",
              "name": "velocity",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "remainingTorpedoes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingMines",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingFuel",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TheThirdLaw.Torpedo[]",
              "name": "torpedoes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TheThirdLaw.Mine[]",
              "name": "mines",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TheThirdLaw.Ship",
          "name": "player2Ship",
          "type": "tuple"
        },
        {
          "internalType": "enum Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currentPlayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastTurnTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllELO",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "playerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "eloRating",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.PlayerELO[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2Address",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player1Ship",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player2Ship",
              "type": "tuple"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentPlayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "getGamesForPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2Address",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player1Ship",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player2Ship",
              "type": "tuple"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentPlayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "inviteIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "victories",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defaultVictories",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defaultLosses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "draws",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "losses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eloRating",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentShipId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        }
      ],
      "name": "inviteToGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTorpedoes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mineRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "victories",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defaultVictories",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defaultLosses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "draws",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "losses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eloRating",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentShipId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "rejectInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameCost",
          "type": "uint256"
        }
      ],
      "name": "setGameCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mineRange",
          "type": "uint256"
        }
      ],
      "name": "setMineRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMines",
          "type": "uint256"
        }
      ],
      "name": "setNumberMines",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTorpedoes",
          "type": "uint256"
        }
      ],
      "name": "setNumberTorpedoes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_torpedoAccel",
          "type": "int256"
        }
      ],
      "name": "setTorpedoAccel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_torpedoFuel",
          "type": "uint256"
        }
      ],
      "name": "setTorpedoFuel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum LeftOrRight",
          "name": "_leftOrRight",
          "type": "uint8"
        },
        {
          "internalType": "enum UpOrDown",
          "name": "_upOrDown",
          "type": "uint8"
        },
        {
          "internalType": "enum Action",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "takeTurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "torpedoAccel",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "torpedoFuel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "torpedoRange",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turnTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5e27d9bc93ca137ccfd6bc76111f497ea10291471f791ff1970d8b37728c75f",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0xE133b7A0e285dC522ddaaaB1b2A288A9e30e5AbB",
    "transactionIndex": 1,
    "gasUsed": "4140581",
    "logsBloom": "0x
    "blockHash": "0xad6459af208de249d782609f427c03b5fda8d4d80378c9223da8c592f8350401",
    "transactionHash": "0xb5e27d9bc93ca137ccfd6bc76111f497ea10291471f791ff1970d8b37728c75f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8682806,
        "transactionHash": "0xb5e27d9bc93ca137ccfd6bc76111f497ea10291471f791ff1970d8b37728c75f",
        "address": "0xE133b7A0e285dC522ddaaaB1b2A288A9e30e5AbB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xad6459af208de249d782609f427c03b5fda8d4d80378c9223da8c592f8350401"
      }
    ],
    "blockNumber": 8682806,
    "cumulativeGasUsed": "4187434",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "304fa5a8b6d836d02506d21841b0982c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughMines\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTimePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTorpedoes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"NotInvited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourGame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourTurn\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"GameOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"InviteToGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"JoinGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"OpenGameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"OpenGameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_ratingA\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_ratingB\",\"type\":\"int256\"},{\"internalType\":\"enum Status\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"calculateElo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createOrJoinRandomGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"forceMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllELO\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eloRating\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.PlayerELO[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getGamesForPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inviteIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"victories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultVictories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eloRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentShipId\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"}],\"name\":\"inviteToGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTorpedoes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"victories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultVictories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eloRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentShipId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"rejectInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameCost\",\"type\":\"uint256\"}],\"name\":\"setGameCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mineRange\",\"type\":\"uint256\"}],\"name\":\"setMineRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMines\",\"type\":\"uint256\"}],\"name\":\"setNumberMines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTorpedoes\",\"type\":\"uint256\"}],\"name\":\"setNumberTorpedoes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_torpedoAccel\",\"type\":\"int256\"}],\"name\":\"setTorpedoAccel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_torpedoFuel\",\"type\":\"uint256\"}],\"name\":\"setTorpedoFuel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum LeftOrRight\",\"name\":\"_leftOrRight\",\"type\":\"uint8\"},{\"internalType\":\"enum UpOrDown\",\"name\":\"_upOrDown\",\"type\":\"uint8\"},{\"internalType\":\"enum Action\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"takeTurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torpedoAccel\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torpedoFuel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torpedoRange\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TheThirdLaw.sol\":\"TheThirdLaw\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Elo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {FixedPointMathLib as fp} from \\\"./FixedPointMathLib.sol\\\";\\n\\nlibrary Elo {\\n    /// @notice Get the 16th root of a number, used in ELO calculations\\n    /// @dev Elo calculations require the 400th root (10 ^ (x / 400)), however this can be simplified to the 16th root (10 ^ ((x / 25) / 16))\\n    function sixteenthRoot(uint256 x) internal pure returns (uint256) {\\n        return fp.sqrt(fp.sqrt(fp.sqrt(fp.sqrt(x))));\\n    }\\n\\n    /// @notice Calculates the change in ELO rating, after a given outcome.\\n    /// @param ratingA the ELO rating of the player A\\n    /// @param ratingB the ELO rating of the player B\\n    /// @param score the score of the player A, scaled by 100. 100 = win, 50 = draw, 0 = loss\\n    /// @param kFactor the k-factor or development multiplier used to calculate the change in ELO rating. 20 is the typical value\\n    /// @return change the change in ELO rating of player A, with 2 decimals of precision. 1501 = 15.01 ELO change\\n    /// @return negative the directional change of player A's ELO. Opposite sign for player B\\n    function ratingChange(\\n        uint256 ratingA,\\n        uint256 ratingB,\\n        uint256 score,\\n        uint256 kFactor\\n    ) internal pure returns (uint256 change, bool negative) {\\n        uint256 _kFactor; // scaled up `kFactor` by 100\\n        bool _negative = ratingB < ratingA;\\n        uint256 ratingDiff; // absolute value difference between `ratingA` and `ratingB`\\n\\n        unchecked {\\n            // scale up the inputs by a factor of 100\\n            // since our elo math is scaled up by 100 (to avoid low precision integer division)\\n            _kFactor = kFactor * 10_000;\\n            ratingDiff = _negative ? ratingA - ratingB : ratingB - ratingA;\\n        }\\n\\n        // checks against overflow/underflow, discovered via fuzzing\\n        // large rating diffs leads to 10^ratingDiff being too large to fit in a uint256\\n        require(ratingDiff < 1126, \\\"Rating difference too large\\\");\\n        // large rating diffs when applying the scale factor leads to underflow (800 - ratingDiff)\\n        if (_negative) require(ratingDiff < 800, \\\"Rating difference too large\\\");\\n\\n        // ----------------------------------------------------------------------\\n        // Below, we'll be running simplified versions of the following formulas:\\n        // expected score = 1 / (1 + 10 ^ (ratingDiff / 400))\\n        // elo change = kFactor * (score - expectedScore)\\n\\n        uint256 n; // numerator of the power, with scaling, (numerator of `ratingDiff / 400`)\\n        uint256 _powered; // the value of 10 ^ numerator\\n        uint256 powered; // the value of 16th root of 10 ^ numerator (fully resolved 10 ^ (ratingDiff / 400))\\n        uint256 kExpectedScore; // the expected score with K factor distributed\\n        uint256 kScore; // the actual score with K factor distributed\\n\\n        unchecked {\\n            // apply offset of 800 to scale the result by 100\\n            n = _negative ? 800 - ratingDiff : 800 + ratingDiff;\\n\\n            // (x / 400) is the same as ((x / 25) / 16))\\n            _powered = fp.rpow(10, n / 25, 1); // divide by 25 to avoid reach uint256 max\\n            powered = sixteenthRoot(_powered); // x ^ (1 / 16) is the same as 16th root of x\\n\\n            // given `change = kFactor * (score - expectedScore)` we can distribute kFactor to both terms\\n            kExpectedScore = _kFactor / (100 + powered); // both numerator and denominator scaled up by 100\\n            kScore = kFactor * score; // input score is already scaled up by 100\\n\\n            // determines the sign of the ELO change\\n            negative = kScore < kExpectedScore;\\n            change = negative\\n                ? kExpectedScore - kScore\\n                : kScore - kExpectedScore;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3688da519f2bf9f5cedd3e099723e66c9e5f93a60a8d0c004058be689c86339e\",\"license\":\"MIT\"},\"contracts/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2 ** 256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(\\n                mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(\\n                mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(\\n                gt(mod(mul(x, y), denominator), 0),\\n                div(mul(x, y), denominator)\\n            )\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed4a309bdd8f11e3e572591e084c8d9e43c5cc50603e8df018da448ba69a1eb3\",\"license\":\"AGPL-3.0-only\"},\"contracts/TheThirdLaw.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"./Elo.sol\\\";\\n\\n// TODO: Add admin function to cancel games if they're too old, or never start\\n// TODO: Consider requiring someone to join a game before they show up on leaderboard\\n\\nerror ContractPaused();\\nerror NotEnoughFunds();\\nerror NotEnoughTorpedoes();\\nerror NotEnoughMines();\\nerror NotYourTurn();\\nerror NotYourGame();\\nerror GameNotActive();\\nerror AlreadyRegistered();\\nerror NotRegistered(address _playerAddress);\\nerror NotInvited(uint _gameId);\\nerror NotEnoughTimePassed();\\n\\nint constant QUADRANT_SIZE = 20;\\nint constant START_DISTANCE = 15;\\nuint constant ASTEROID_SIZE = 10; // Manhattan distance\\n\\nint constant K = 1; // K factor\\n\\nenum LeftOrRight {\\n    None,\\n    Left,\\n    Right\\n}\\n\\nenum UpOrDown {\\n    None,\\n    Up,\\n    Down\\n}\\n\\nenum Action {\\n    None,\\n    FireTorpedo,\\n    DropMine\\n}\\n\\nenum Status {\\n    NotStarted,\\n    Player1Destroyed,\\n    Player2Destroyed,\\n    Player1Fled,\\n    Player2Fled,\\n    Draw,\\n    Active,\\n    Over\\n}\\n\\ncontract TheThirdLaw is Ownable {\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    // I expect this to break if it gets big enough\\n    EnumerableMap.AddressToUintMap private addressToELO;\\n\\n    uint public gameCost = 0.001 ether;\\n    uint public feePercent = 10;\\n    uint public feeBalance = 0;\\n\\n    uint public maxTorpedoes = 5;\\n    uint public maxMines = 5;\\n    uint public torpedoFuel = 10;\\n    uint public mineRange = 2;\\n    int public torpedoAccel = 1; // TODO: CRITICAL -> This may need to be locked to 1 now\\n    int public torpedoRange = 1; // TODO: Decide to make this adjustable or constant\\n\\n    // 5 minutes in milliseconds\\n    uint public turnTimeout = 5 * 60 * 1000;\\n\\n    bool public active = true;\\n\\n    // Super savvy players can find this and use it to decide whether or not\\n    // to join an open game\\n    uint openGameId = 0;\\n\\n    mapping(address => Player) public players;\\n\\n    Game[] public games;\\n\\n    event InviteToGame(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n    event JoinGame(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event OpenGameCreated(\\n        address indexed _player1Address,\\n        uint indexed _gameId\\n    );\\n    event OpenGameJoined(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event GameStarted(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event GameOver(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    struct Game {\\n        uint id;\\n        address player1Address;\\n        address player2Address;\\n        Ship player1Ship;\\n        Ship player2Ship;\\n        Status status;\\n        uint value; // Amount to be paid to victor, or split if there is a tie\\n        address currentPlayer; // Set to None if game not started or is over\\n        uint lastTurnTimestamp;\\n        // TODO: CRITICAL -> Add the torpedo and mine stats here and use them so old games stay as expected if changes are made\\n    }\\n\\n    struct Player {\\n        address ownerAddress;\\n        uint[] gameIds;\\n        uint[] inviteIds;\\n        uint victories; // Enemy was destroyed\\n        uint defaultVictories; // Enemy was forced to flee\\n        uint defaultLosses; // Player was forced to flee\\n        uint draws; // Both players ran out of weapons\\n        uint losses; // Player was destroyed\\n        uint eloRating;\\n        uint currentShipId;\\n    }\\n\\n    struct Ship {\\n        address ownerAddress;\\n        Position position;\\n        Velocity velocity;\\n        uint remainingTorpedoes;\\n        uint remainingMines;\\n        Torpedo[] torpedoes; // Added this line\\n        Mine[] mines; // Added this line\\n    }\\n\\n    struct Torpedo {\\n        Position position;\\n        Velocity velocity;\\n        uint remainingFuel;\\n    }\\n\\n    struct Mine {\\n        Position position;\\n    }\\n\\n    struct Position {\\n        int row;\\n        int col;\\n    }\\n\\n    struct Velocity {\\n        int row;\\n        int col;\\n    }\\n\\n    constructor() {\\n        games.push();\\n    }\\n\\n    // PUBLIC\\n    function createOrJoinRandomGame() public payable isActive {\\n        if (msg.value != gameCost) revert NotEnoughFunds();\\n\\n        if (players[msg.sender].ownerAddress == address(0)) {\\n            _registerPlayer(msg.sender);\\n        }\\n\\n        if (openGameId == 0) {\\n            openGameId = games.length;\\n            games.push();\\n            games[openGameId].id = openGameId;\\n            games[openGameId].player1Address = msg.sender;\\n            games[openGameId].value = msg.value;\\n            players[msg.sender].gameIds.push(openGameId);\\n            players[msg.sender].inviteIds.push(openGameId); // TODO: This is probably not the best way to handle this\\n\\n            emit OpenGameCreated(msg.sender, openGameId);\\n        } else {\\n            games[openGameId].player2Address = msg.sender;\\n            games[openGameId].value += msg.value;\\n            players[msg.sender].gameIds.push(openGameId);\\n            players[msg.sender].inviteIds.push(openGameId); // TODO: This is probably not the best way to handle this\\n\\n            _startGame(openGameId);\\n\\n            emit OpenGameJoined(\\n                games[openGameId].player1Address,\\n                msg.sender,\\n                openGameId\\n            );\\n\\n            openGameId = 0;\\n        }\\n    }\\n\\n    function inviteToGame(address _player2Address) public payable isActive {\\n        if (msg.value != gameCost) revert NotEnoughFunds();\\n\\n        if (players[msg.sender].ownerAddress == address(0)) {\\n            _registerPlayer(msg.sender);\\n        }\\n\\n        if (players[_player2Address].ownerAddress == address(0)) {\\n            _registerPlayer(_player2Address);\\n        }\\n\\n        uint gameId = games.length;\\n        games.push();\\n        games[gameId].id = gameId;\\n        games[gameId].player1Address = msg.sender;\\n        games[gameId].player2Address = _player2Address;\\n        games[gameId].value = msg.value;\\n        players[msg.sender].gameIds.push(gameId);\\n        players[_player2Address].gameIds.push(gameId);\\n        players[_player2Address].inviteIds.push(gameId); // TODO: This is probably not the best way to handle this\\n\\n        emit InviteToGame(msg.sender, _player2Address, gameId);\\n    }\\n\\n    function acceptInvite(uint _gameId) public payable {\\n        if (msg.value != gameCost) revert NotEnoughFunds();\\n\\n        if (games[_gameId].player2Address != msg.sender)\\n            revert NotInvited(_gameId);\\n\\n        games[_gameId].value += msg.value;\\n\\n        _startGame(_gameId);\\n\\n        emit JoinGame(games[_gameId].player1Address, msg.sender, _gameId);\\n    }\\n\\n    // Prevent spam by refunding the inviter's fee to the game contract if\\n    // the invite is rejected.\\n    function rejectInvite(uint _gameId) public {\\n        if (games[_gameId].player2Address != msg.sender)\\n            revert NotInvited(_gameId);\\n\\n        feeBalance += games[_gameId].value;\\n        games[_gameId].value = 0;\\n\\n        games[_gameId].status = Status.Over;\\n    }\\n\\n    function takeTurn(\\n        uint _gameId,\\n        LeftOrRight _leftOrRight,\\n        UpOrDown _upOrDown,\\n        Action _action\\n    ) public {\\n        Game storage game = games[_gameId];\\n\\n        if (game.status != Status.Active) revert GameNotActive();\\n        if (game.currentPlayer != msg.sender) revert NotYourTurn();\\n\\n        _processTurn(_gameId, _leftOrRight, _upOrDown, _action);\\n    }\\n\\n    // If it's been 5 minutes since the last player's turn, then either player\\n    // can end the game in a draw\\n    // TODO: Audit priority\\n    function endGame(uint _gameId) public {\\n        // Only one of the players in the game can call this function\\n        if (\\n            games[_gameId].player1Address != msg.sender &&\\n            games[_gameId].player2Address != msg.sender\\n        ) revert NotYourGame();\\n\\n        if (games[_gameId].status != Status.Active) revert GameNotActive();\\n\\n        if (block.timestamp - games[_gameId].lastTurnTimestamp < turnTimeout)\\n            revert NotEnoughTimePassed();\\n\\n        _endGame(_gameId, Status.Draw);\\n    }\\n\\n    // If it's been 5 minutes since the last player's turn, the other player\\n    // can force their opponent to move with no input\\n    // TODO: Audit priority\\n    function forceMove(uint _gameId) public {\\n        Game storage game = games[_gameId];\\n\\n        if (game.status != Status.Active) revert GameNotActive();\\n\\n        if (\\n            game.player1Address != msg.sender &&\\n            game.player2Address != msg.sender\\n        ) revert NotYourGame();\\n\\n        if (block.timestamp - game.lastTurnTimestamp < turnTimeout) {\\n            revert NotEnoughTimePassed();\\n        }\\n\\n        _processTurn(_gameId, LeftOrRight.None, UpOrDown.None, Action.None);\\n    }\\n\\n    // INTERNAL\\n\\n    function _processTurn(\\n        uint _gameId,\\n        LeftOrRight _leftOrRight,\\n        UpOrDown _upOrDown,\\n        Action _action\\n    ) internal {\\n        Game storage game = games[_gameId];\\n        Ship storage ship;\\n        Ship storage enemyShip;\\n\\n        if (game.currentPlayer == game.player1Address) {\\n            ship = game.player1Ship;\\n            enemyShip = game.player2Ship;\\n        } else {\\n            ship = game.player2Ship;\\n            enemyShip = game.player1Ship;\\n        }\\n\\n        if (_leftOrRight == LeftOrRight.Left) {\\n            ship.velocity.col -= 1;\\n        } else if (_leftOrRight == LeftOrRight.Right) {\\n            ship.velocity.col += 1;\\n        }\\n\\n        if (_upOrDown == UpOrDown.Up) {\\n            ship.velocity.row -= 1;\\n        } else if (_upOrDown == UpOrDown.Down) {\\n            ship.velocity.row += 1;\\n        }\\n\\n        if (_action == Action.FireTorpedo) {\\n            if (ship.remainingTorpedoes == 0) revert NotEnoughTorpedoes();\\n            ship.remainingTorpedoes -= 1;\\n            ship.torpedoes.push(\\n                Torpedo(\\n                    Position(ship.position.row, ship.position.col),\\n                    Velocity(ship.velocity.row, ship.velocity.col),\\n                    torpedoFuel\\n                )\\n            );\\n        } else if (_action == Action.DropMine) {\\n            if (ship.remainingMines == 0) revert NotEnoughMines();\\n            ship.remainingMines -= 1;\\n            ship.mines.push(\\n                Mine(Position(ship.position.row, ship.position.col))\\n            );\\n        }\\n\\n        _moveShip(ship);\\n        _checkForFleeingBoard(game, ship);\\n        _checkForAsteroidCollision(game, ship);\\n        _checkForMineCollision(game, ship, enemyShip.mines);\\n        _moveTorpedoesTowardsEnemy(game, enemyShip, ship.torpedoes);\\n        game.lastTurnTimestamp = block.timestamp;\\n\\n        // Switch the current player\\n        if (game.currentPlayer == game.player1Address) {\\n            game.currentPlayer = game.player2Address;\\n        } else {\\n            game.currentPlayer = game.player1Address;\\n        }\\n    }\\n\\n    function _moveShip(Ship storage _ship) internal {\\n        _ship.position.row += _ship.velocity.row;\\n        _ship.position.col += _ship.velocity.col;\\n    }\\n\\n    function _moveTorpedoesTowardsEnemy(\\n        Game storage _game,\\n        Ship storage _enemyShip,\\n        Torpedo[] storage _torpedoes\\n    ) internal {\\n        for (uint i = 0; i < _torpedoes.length; i++) {\\n            if (_torpedoes[i].remainingFuel == 0) {\\n                continue;\\n            } else {\\n                _torpedoes[i].remainingFuel -= 1;\\n\\n                // Calculate relative position\\n                int row_r = _enemyShip.position.row -\\n                    _torpedoes[i].position.row;\\n                int col_r = _enemyShip.position.col -\\n                    _torpedoes[i].position.col;\\n\\n                // Adjust the torpedo's velocity based on relative position\\n                if (row_r > 0) {\\n                    _torpedoes[i].velocity.row += 1;\\n                } else if (row_r < 0) {\\n                    _torpedoes[i].velocity.row -= 1;\\n                }\\n\\n                if (col_r > 0) {\\n                    _torpedoes[i].velocity.col += 1;\\n                } else if (col_r < 0) {\\n                    _torpedoes[i].velocity.col -= 1;\\n                }\\n\\n                // Move the torpedo based on its velocity\\n                _torpedoes[i].position.row += _torpedoes[i].velocity.row;\\n                _torpedoes[i].position.col += _torpedoes[i].velocity.col;\\n\\n                // If the torpedo is within 1 square of the enemy ship, it hits and the game is over\\n                // Use row and column, not manhattan distance\\n                if (\\n                    abs(_torpedoes[i].position.row - _enemyShip.position.row) <=\\n                    torpedoRange &&\\n                    abs(_torpedoes[i].position.col - _enemyShip.position.col) <=\\n                    torpedoRange\\n                ) {\\n                    if (_enemyShip.ownerAddress == _game.player1Address) {\\n                        _endGame(_game.id, Status.Player1Destroyed);\\n                    } else {\\n                        _endGame(_game.id, Status.Player2Destroyed);\\n                    }\\n                }\\n\\n                // Check for collisions with asteroid\\n                if (\\n                    _manhattanDistance(\\n                        _torpedoes[i].position,\\n                        Position(0, 0)\\n                    ) <= ASTEROID_SIZE\\n                ) {\\n                    _torpedoes[i].remainingFuel = 0;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkForAsteroidCollision(\\n        Game storage _game,\\n        Ship storage _ship\\n    ) internal {\\n        if (\\n            _manhattanDistance(_ship.position, Position(0, 0)) <= ASTEROID_SIZE\\n        ) {\\n            // This player has hit an asteroid and lost\\n            if (_ship.ownerAddress == _game.player1Address) {\\n                _endGame(_game.id, Status.Player1Destroyed);\\n            } else {\\n                _endGame(_game.id, Status.Player2Destroyed);\\n            }\\n        }\\n    }\\n\\n    function _checkForMineCollision(\\n        Game storage _game,\\n        Ship storage _ship,\\n        Mine[] storage _enemyMines\\n    ) internal {\\n        for (uint i = 0; i < _enemyMines.length; i++) {\\n            if (\\n                _manhattanDistance(_ship.position, _enemyMines[i].position) <=\\n                mineRange\\n            ) {\\n                // This player has hit a mine and lost\\n                if (_ship.ownerAddress == _game.player1Address) {\\n                    _endGame(_game.id, Status.Player1Destroyed);\\n                } else {\\n                    _endGame(_game.id, Status.Player2Destroyed);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkForFleeingBoard(\\n        Game storage _game,\\n        Ship storage _ship\\n    ) internal {\\n        if (\\n            abs(_ship.position.row) > QUADRANT_SIZE ||\\n            abs(_ship.position.col) > QUADRANT_SIZE\\n        ) {\\n            // This player has fled the board and lost\\n            if (_ship.ownerAddress == _game.player1Address) {\\n                _endGame(_game.id, Status.Player1Fled);\\n            } else {\\n                _endGame(_game.id, Status.Player2Fled);\\n            }\\n        }\\n    }\\n\\n    // THIS MUST BE AUDITED!!!\\n    function _endGame(uint _gameId, Status _status) internal {\\n        Game storage game = games[_gameId];\\n        game.status = _status;\\n        game.currentPlayer = address(0);\\n\\n        if (_status == Status.Player1Destroyed) {\\n            players[game.player2Address].victories += 1;\\n            players[game.player1Address].losses += 1;\\n\\n            // Pay the victor\\n            uint payout = game.value;\\n            game.value = 0;\\n            payable(game.player2Address).transfer(payout);\\n        } else if (_status == Status.Player2Destroyed) {\\n            players[game.player1Address].victories += 1;\\n            players[game.player2Address].losses += 1;\\n\\n            // Pay the victor\\n            uint payout = game.value;\\n            game.value = 0;\\n            payable(game.player1Address).transfer(payout);\\n            game.value = 0;\\n        } else if (_status == Status.Player1Fled) {\\n            players[game.player2Address].defaultVictories += 1;\\n            players[game.player1Address].defaultLosses += 1;\\n\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay the victor 75% of the game value\\n            uint payout = (balance * 75) / 100;\\n            payable(game.player2Address).transfer(payout);\\n            balance -= payout;\\n\\n            // Add the remaining 25% to the contract's fee balance\\n            feeBalance += balance;\\n        } else if (_status == Status.Player2Fled) {\\n            players[game.player1Address].defaultVictories += 1;\\n            players[game.player2Address].defaultLosses += 1;\\n\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay the victor 75% of the game value\\n            uint payout = (balance * 75) / 100;\\n            payable(game.player1Address).transfer(payout);\\n            balance -= payout;\\n\\n            // Add the remaining 25% to the contract's fee balance\\n            feeBalance += balance;\\n        } else if (_status == Status.Draw) {\\n            players[game.player1Address].draws += 1;\\n            players[game.player2Address].draws += 1;\\n\\n            // Split the game value between the players\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay each player 50% of the game value\\n            uint payout = balance / 2;\\n            payable(game.player1Address).transfer(payout);\\n            balance -= payout;\\n            payable(game.player2Address).transfer(balance);\\n        }\\n\\n        (uint newRating1, uint newRating2) = calculateElo(\\n            int(players[game.player1Address].eloRating),\\n            int(players[game.player2Address].eloRating),\\n            _status\\n        );\\n\\n        players[game.player1Address].eloRating = newRating1;\\n        players[game.player2Address].eloRating = newRating2;\\n\\n        addressToELO.set(game.player1Address, newRating1);\\n        addressToELO.set(game.player2Address, newRating2);\\n\\n        emit GameOver(game.player1Address, game.player2Address, _gameId);\\n    }\\n\\n    // TODO: I don't understand how K factor works.  Recommended was 32 or 20, but that gave drastic results\\n    // 1 seems to work well initially, don't know what will happen later\\n    // TODO: CRITICAL -> Understand and validate max rating differences!\\n    // TODO: Find a more elegant way to handle than blocking games\\n    // TODO: This may be expensive\\n    // TODO: Investigate consequenses of gaming this with multiple games and choosing when to end/lose\\n    // TODO: Decide to only do 50 or 75% ELO change if one player flees\\n    // Calculate the new ELO ratings of two players\\n    // TODO: This is probably abusable since we allow players to play themselves\\n    function calculateElo(\\n        int _ratingA,\\n        int _ratingB,\\n        Status _result\\n    ) public pure returns (uint, uint) {\\n        // DEBUG IGNORE EDGE CASE\\n\\n        // If the ratings are too far apart, don't change them\\n        if (abs(_ratingA - _ratingB) > 800) {\\n            return (uint(_ratingA), uint(_ratingB));\\n        }\\n\\n        // END DEBUG IGNORE EDGE CASE\\n\\n        uint resultValue;\\n\\n        if (\\n            _result == Status.Player2Destroyed || _result == Status.Player2Fled\\n        ) {\\n            resultValue = 100;\\n        } else if (\\n            _result == Status.Player1Destroyed || _result == Status.Player1Fled\\n        ) {\\n            resultValue = 0;\\n        } else if (_result == Status.Draw) {\\n            resultValue = 50;\\n        } else {\\n            revert(\\\"Invalid result\\\");\\n        }\\n\\n        (uint256 change, bool negative) = Elo.ratingChange(\\n            uint(_ratingA),\\n            uint(_ratingB),\\n            resultValue,\\n            uint(K)\\n        );\\n\\n        int newRatingA;\\n        int newRatingB;\\n\\n        if (negative) {\\n            newRatingA = _ratingA - int(change);\\n            newRatingB = _ratingB + int(change);\\n        } else {\\n            newRatingA = _ratingA + int(change);\\n            newRatingB = _ratingB - int(change);\\n        }\\n\\n        if (newRatingA < 0) {\\n            newRatingA = 0;\\n        }\\n\\n        if (newRatingB < 0) {\\n            newRatingB = 0;\\n        }\\n        // It shouldn't be possible for ELO to get above maxIint without me being so rich I don't care :D\\n\\n        return (uint(newRatingA), uint(newRatingB));\\n    }\\n\\n    function _registerPlayer(address _player) internal {\\n        if (players[_player].ownerAddress != address(0))\\n            revert AlreadyRegistered();\\n        players[_player] = Player(\\n            _player,\\n            new uint[](0),\\n            new uint[](0),\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1200,\\n            0\\n        );\\n\\n        addressToELO.set(_player, 1200);\\n    }\\n\\n    function _startGame(uint _gameId) internal {\\n        Ship storage player1Ship = games[_gameId].player1Ship;\\n        Ship storage player2Ship = games[_gameId].player2Ship;\\n\\n        // Player 1 starts on left side, can be top or bottom\\n        // They start on the top if the block number is even and on the bottom if it's odd\\n        int player1Row = int(block.number) % 2 == 0 ? int(1) : -1;\\n\\n        player1Ship.ownerAddress = games[_gameId].player1Address;\\n        player1Ship.position = Position(\\n            START_DISTANCE * player1Row,\\n            -START_DISTANCE\\n        );\\n        player1Ship.velocity = Velocity(0, 0);\\n        player1Ship.remainingTorpedoes = maxTorpedoes;\\n        player1Ship.remainingMines = maxMines;\\n\\n        // Player 2 starts on right side, can be top or bottom, based on timestamp\\n        int player2Row = int(block.timestamp) % 2 == 0 ? int(1) : -1;\\n\\n        player2Ship.ownerAddress = games[_gameId].player2Address;\\n        player2Ship.position = Position(\\n            START_DISTANCE * player2Row,\\n            START_DISTANCE\\n        );\\n        player2Ship.velocity = Velocity(0, 0);\\n        player2Ship.remainingTorpedoes = maxTorpedoes;\\n        player2Ship.remainingMines = maxMines;\\n\\n        // Assuming torpedoes and mines arrays start empty, there's no need to initialize them\\n\\n        // Flip a coin and set the starting player\\n        if (block.prevrandao % 2 == 0) {\\n            games[_gameId].currentPlayer = games[_gameId].player1Address;\\n        } else {\\n            games[_gameId].currentPlayer = games[_gameId].player2Address;\\n        }\\n\\n        games[_gameId].status = Status.Active;\\n\\n        // Take the fee from the game value and add it to the contract's fee balance\\n        uint fee = (games[_gameId].value * feePercent) / 100;\\n        feeBalance += fee;\\n        games[_gameId].value -= fee;\\n\\n        emit GameStarted(\\n            games[_gameId].player1Address,\\n            games[_gameId].player2Address,\\n            _gameId\\n        );\\n    }\\n\\n    // UTILS\\n\\n    function _manhattanDistance(\\n        Position memory _position1,\\n        Position memory _position2\\n    ) internal pure returns (uint) {\\n        return\\n            uint(\\n                abs(_position1.row - _position2.row) +\\n                    abs(_position1.col - _position2.col)\\n            );\\n    }\\n\\n    function abs(int _x) internal pure returns (int) {\\n        if (_x < 0) {\\n            return -_x;\\n        } else {\\n            return _x;\\n        }\\n    }\\n\\n    // VIEWS\\n\\n    // TODO: Do these need some kind of pagination?\\n    // function getGames() public view returns (Game[] memory) {\\n    //     return games;\\n    // }\\n\\n    function getGamesForPlayer(\\n        address _playerAddress\\n    ) public view returns (Game[] memory) {\\n        uint[] memory gameIds = players[_playerAddress].gameIds;\\n        Game[] memory playerGames = new Game[](gameIds.length);\\n        for (uint i = 0; i < gameIds.length; i++) {\\n            playerGames[i] = games[gameIds[i]];\\n        }\\n        return playerGames;\\n    }\\n\\n    function getPlayer(\\n        address _playerAddress\\n    ) public view returns (Player memory) {\\n        return players[_playerAddress];\\n    }\\n\\n    function getGame(uint _gameId) public view returns (Game memory) {\\n        return games[_gameId];\\n    }\\n\\n    struct PlayerELO {\\n        address playerAddress;\\n        uint eloRating;\\n    }\\n\\n    function getAllELO() external view returns (PlayerELO[] memory) {\\n        PlayerELO[] memory playerELOs = new PlayerELO[](addressToELO.length());\\n        for (uint i = 0; i < addressToELO.length(); i++) {\\n            (address playerAddress, uint elo) = addressToELO.at(i);\\n            playerELOs[i] = PlayerELO(playerAddress, elo);\\n        }\\n        return playerELOs;\\n    }\\n\\n    // MODIFIERS\\n\\n    modifier isActive() {\\n        if (!active) revert ContractPaused();\\n        _;\\n    }\\n\\n    // ADMIN\\n\\n    function setGameCost(uint _gameCost) public onlyOwner {\\n        gameCost = _gameCost;\\n    }\\n\\n    function setFeePercent(uint _feePercent) public onlyOwner {\\n        feePercent = _feePercent;\\n    }\\n\\n    function setNumberTorpedoes(uint _maxTorpedoes) public onlyOwner {\\n        maxTorpedoes = _maxTorpedoes;\\n    }\\n\\n    function setNumberMines(uint _maxMines) public onlyOwner {\\n        maxMines = _maxMines;\\n    }\\n\\n    function setTorpedoFuel(uint _torpedoFuel) public onlyOwner {\\n        torpedoFuel = _torpedoFuel;\\n    }\\n\\n    function setMineRange(uint _mineRange) public onlyOwner {\\n        mineRange = _mineRange;\\n    }\\n\\n    function setTorpedoAccel(int _torpedoAccel) public onlyOwner {\\n        torpedoAccel = _torpedoAccel;\\n    }\\n\\n    function pause() public onlyOwner {\\n        active = false;\\n    }\\n\\n    function withdrawFee() public onlyOwner {\\n        payable(msg.sender).transfer(feeBalance);\\n        feeBalance = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8aa3fc93d16b911f5c7ebaa000e5f61ba59d4f21079a98241c3423ba661a69f6\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c68000600455600a600555600060065560056007556005600855600a6009556002600a556001600b556001600c55620493e0600d556001600e60006101000a81548160ff0219169083151502179055506000600f553480156200006b57600080fd5b50620000773362000089565b601180546001018155600052620000d9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6144fb80620000e96000396000f3fe60806040526004361061021a5760003560e01c80637f17b79d11610123578063c15e7e30116100ab578063d0399bb81161006f578063d0399bb8146105f7578063e2eb41ff14610617578063e941fa78146106c4578063f2fde38b146106d9578063f9d86073146106f957600080fd5b8063c15e7e3014610579578063c1699a9814610599578063c2e80b47146105a1578063cab896dc146105c1578063cd607b62146105d757600080fd5b80638da5cb5b116100f25780638da5cb5b146104de57806391c8767114610506578063a2f77bcc14610526578063b69667fe14610553578063bf8e91761461056657600080fd5b80637f17b79d1461045e5780637fd6f15c1461047e5780638456cb591461049457806384d2957e146104a957600080fd5b806356ce1175116101a657806367c5f6e51161017557806367c5f6e5146103dd5780636cc4b0b7146103fd5780636d64aa0614610413578063715018a6146104295780637ce3489b1461043e57600080fd5b806356ce1175146103645780635c12cd4b1461037a57806360b71d4e146103a757806364616253146103bd57600080fd5b806341b02d71116101ed57806341b02d71146102d457806346b9bfe4146102ea5780634f764e351461030c578063526aef4c1461032c578063544722af1461034e57600080fd5b806302fb0c5e1461021f5780630aa1b2661461024e578063117a5b901461027b5780633c6e43a9146102b0575b600080fd5b34801561022b57600080fd5b50600e546102399060ff1681565b60405190151581526020015b60405180910390f35b34801561025a57600080fd5b5061026e610269366004613df1565b61070f565b6040516102459190614060565b34801561028757600080fd5b5061029b6102963660046140c2565b610bdf565b604051610245999897969594939291906140db565b3480156102bc57600080fd5b506102c660075481565b604051908152602001610245565b3480156102e057600080fd5b506102c6600b5481565b3480156102f657600080fd5b5061030a6103053660046140c2565b610f3c565b005b34801561031857600080fd5b5061030a6103273660046140c2565b610f49565b34801561033857600080fd5b50610341610f56565b6040516102459190614157565b34801561035a57600080fd5b506102c6600a5481565b34801561037057600080fd5b506102c660085481565b34801561038657600080fd5b5061039a610395366004613df1565b611040565b60405161024591906141df565b3480156103b357600080fd5b506102c660065481565b3480156103c957600080fd5b5061030a6103d83660046140c2565b6111c7565b3480156103e957600080fd5b5061030a6103f83660046140c2565b6112b1565b34801561040957600080fd5b506102c6600d5481565b34801561041f57600080fd5b506102c6600c5481565b34801561043557600080fd5b5061030a6112be565b34801561044a57600080fd5b5061030a6104593660046140c2565b6112d2565b34801561046a57600080fd5b5061030a6104793660046140c2565b6112df565b34801561048a57600080fd5b506102c660055481565b3480156104a057600080fd5b5061030a6112ec565b3480156104b557600080fd5b506104c96104c4366004614290565b611300565b60408051928352602083019190915201610245565b3480156104ea57600080fd5b506000546040516001600160a01b039091168152602001610245565b34801561051257600080fd5b5061030a6105213660046140c2565b611484565b34801561053257600080fd5b506105466105413660046140c2565b611590565b60405161024591906142cd565b61030a610561366004613df1565b61194e565b61030a6105743660046140c2565b611b5f565b34801561058557600080fd5b5061030a6105943660046142ed565b611c85565b61030a611d24565b3480156105ad57600080fd5b5061030a6105bc3660046140c2565b611ffd565b3480156105cd57600080fd5b506102c660045481565b3480156105e357600080fd5b5061030a6105f23660046140c2565b61200a565b34801561060357600080fd5b5061030a6106123660046140c2565b612017565b34801561062357600080fd5b5061067f610632366004613df1565b601060205260009081526040902080546003820154600483015460058401546006850154600786015460088701546009909701546001600160a01b03909616969495939492939192909188565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610245565b3480156106d057600080fd5b5061030a61216f565b3480156106e557600080fd5b5061030a6106f4366004613df1565b6121ad565b34801561070557600080fd5b506102c660095481565b6001600160a01b038116600090815260106020908152604080832060010180548251818502810185019093528083526060949383018282801561077157602002820191906000526020600020905b81548152602001906001019080831161075d575b505050505090506000815167ffffffffffffffff81111561079457610794614340565b6040519080825280602002602001820160405280156107cd57816020015b6107ba613ca6565b8152602001906001900390816107b25790505b50905060005b8251811015610bd75760118382815181106107f0576107f0614356565b60200260200101518154811061080857610808614356565b60009182526020808320604080516101208101825260199094029091018054845260018101546001600160a01b03908116858501526002820154811685840152825160e0810184526003830180549092168152835180850185526004840154815260058401548187015281860152835180850185526006840154815260078401548187015281850152600883015460608281019190915260098401546080830152600a8401805486518189028101890190975280875297989497918901969295939460a08701949391929184015b828210156109465760008481526020908190206040805160a0810182526005860290920180546060840190815260018083015460808601529084528251808401845260028301548152600383015481870152848601526004909101549183019190915290835290920191016108d6565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156109bc57600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101610973565b5050509152505081526040805160e081018252600c840180546001600160a01b0316825282518084018452600d8601548152600e8601546020828101919091528381019190915283518085018552600f8701548152601087015481830152838501526011860154606084015260128601546080840152601386018054855181840281018401909652808652958201959394929360a08601939260009084015b82821015610acb5760008481526020908190206040805160a081018252600586029092018054606084019081526001808301546080860152908452825180840184526002830154815260038301548187015284860152600490910154918301919091529083529092019101610a5b565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610b4157600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101610af8565b505050915250508152601582015460209091019060ff166007811115610b6957610b69613f69565b6007811115610b7a57610b7a613f69565b81526016820154602082015260178201546001600160a01b031660408201526018909101546060909101528251839083908110610bb957610bb9614356565b60200260200101819052508080610bcf90614382565b9150506107d3565b509392505050565b60118181548110610bef57600080fd5b6000918252602080832060199092029091018054600182015460028301546040805160e0810182526003860180546001600160a01b03908116835283518085018552600489015481526005890154818b0152838a015283518085018552600689015481526007890154818b0152838501526008880154606084015260098801546080840152600a880180548551818c0281018c01909652808652979b50958116999416979195909460a0870194909284015b82821015610d115760008481526020908190206040805160a081018252600586029092018054606084019081526001808301546080860152908452825180840184526002830154815260038301548187015284860152600490910154918301919091529083529092019101610ca1565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610d8757600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101610d3e565b505050915250506040805160e081018252600c840180546001600160a01b0316825282518084018452600d8601548152600e8601546020828101919091528084019190915283518085018552600f87015481526010870154818301528385015260118601546060840152601286015460808401526013860180548551818402810184019096528086529596959394929360a08601939260009084015b82821015610e935760008481526020908190206040805160a081018252600586029092018054606084019081526001808301546080860152908452825180840184526002830154815260038301548187015284860152600490910154918301919091529083529092019101610e23565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f0957600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101610ec0565b50505091525050601582015460168301546017840154601890940154929360ff9092169290916001600160a01b03169089565b610f44612223565b600b55565b610f51612223565b600a55565b60606000610f64600161227d565b67ffffffffffffffff811115610f7c57610f7c614340565b604051908082528060200260200182016040528015610fc157816020015b6040805180820190915260008082526020820152815260200190600190039081610f9a5790505b50905060005b610fd1600161227d565b81101561103a57600080610fe660018461228e565b915091506040518060400160405280836001600160a01b031681526020018281525084848151811061101a5761101a614356565b60200260200101819052505050808061103290614382565b915050610fc7565b50919050565b61109f60405180610140016040528060006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038083166000908152601060209081526040918290208251610140810184528154909416845260018101805484518185028101850190955280855291938584019390929083018282801561111957602002820191906000526020600020905b815481526020019060010190808311611105575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561117157602002820191906000526020600020905b81548152602001906001019080831161115d575b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b6000601182815481106111dc576111dc614356565b6000918252602090912060199091020190506006601582015460ff16600781111561120957611209613f69565b146112265760405162a3097160e01b815260040160405180910390fd5b60018101546001600160a01b03163314801590611250575060028101546001600160a01b03163314155b1561126e57604051631794a8af60e11b815260040160405180910390fd5b600d546018820154611280904261439b565b101561129f57604051635ada9a9960e01b815260040160405180910390fd5b6112ad8260008060006122aa565b5050565b6112b9612223565b600755565b6112c6612223565b6112d06000612647565b565b6112da612223565b600555565b6112e7612223565b600455565b6112f4612223565b600e805460ff19169055565b60008061032061131861131386886143ae565b612697565b131561132857508390508261147c565b6000600284600781111561133e5761133e613f69565b148061135b5750600484600781111561135957611359613f69565b145b1561136857506064611405565b600184600781111561137c5761137c613f69565b14806113995750600384600781111561139757611397613f69565b145b156113a657506000611405565b60058460078111156113ba576113ba613f69565b036113c757506032611405565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c995cdd5b1d60921b60448201526064015b60405180910390fd5b60008061141588888560016126ae565b91509150600080821561143f5761142c848b6143ae565b9150611438848a6143d5565b9050611458565b611449848b6143d5565b9150611455848a6143ae565b90505b600082121561146657600091505b6000811215611473575060005b90955093505050505b935093915050565b336001600160a01b0316601182815481106114a1576114a1614356565b60009182526020909120600260199092020101546001600160a01b0316146114df5760405163da271c6960e01b8152600481018290526024016113fc565b601181815481106114f2576114f2614356565b9060005260206000209060190201601601546006600082825461151591906143fd565b9250508190555060006011828154811061153157611531614356565b90600052602060002090601902016016018190555060076011828154811061155b5761155b614356565b60009182526020909120601560199092020101805460ff1916600183600781111561158857611588613f69565b021790555050565b611598613ca6565b601182815481106115ab576115ab614356565b60009182526020808320604080516101208101825260199094029091018054845260018101546001600160a01b03908116858501526002820154811685840152825160e0810184526003830180549092168152835180850185526004840154815260058401548187015281860152835180850185526006840154815260078401548187015281850152600883015460608281019190915260098401546080830152600a8401805486518189028101890190975280875297989497918901969295939460a08701949391929184015b828210156116e95760008481526020908190206040805160a081018252600586029092018054606084019081526001808301546080860152908452825180840184526002830154815260038301548187015284860152600490910154918301919091529083529092019101611679565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561175f57600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101611716565b5050509152505081526040805160e081018252600c840180546001600160a01b0316825282518084018452600d8601548152600e8601546020828101919091528381019190915283518085018552600f8701548152601087015481830152838501526011860154606084015260128601546080840152601386018054855181840281018401909652808652958201959394929360a08601939260009084015b8282101561186e5760008481526020908190206040805160a0810182526005860290920180546060840190815260018083015460808601529084528251808401845260028301548152600383015481870152848601526004909101549183019190915290835290920191016117fe565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156118e45760008481526020908190206040805160608101825260028602909201805483850190815260019182015492840192909252908252908352909201910161189b565b505050915250508152601582015460209091019060ff16600781111561190c5761190c613f69565b600781111561191d5761191d613f69565b81526016820154602082015260178201546001600160a01b0316604082015260189091015460609091015292915050565b600e5460ff166119715760405163ab35696f60e01b815260040160405180910390fd5b600454341461199357604051631036b5ad60e31b815260040160405180910390fd5b336000908152601060205260409020546001600160a01b03166119b9576119b9336127f4565b6001600160a01b03818116600090815260106020526040902054166119e1576119e1816127f4565b601180546001810180835560008390529091829182908110611a0557611a05614356565b9060005260206000209060190201600001819055503360118281548110611a2e57611a2e614356565b906000526020600020906019020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160118281548110611a7757611a77614356565b906000526020600020906019020160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055503460118281548110611ac057611ac0614356565b600091825260208083206016601990930201919091019290925533808252601083526040808320600190810180548083018255908552858520018690556001600160a01b038716808552828520808301805480850182559087528787200188905560020180549283018155855294842001859055518493927f64104361ad73841dc20b552e4700f3f464329596092336a5e3c02d8862623b6691a45050565b6004543414611b8157604051631036b5ad60e31b815260040160405180910390fd5b336001600160a01b031660118281548110611b9e57611b9e614356565b60009182526020909120600260199092020101546001600160a01b031614611bdc5760405163da271c6960e01b8152600481018290526024016113fc565b3460118281548110611bf057611bf0614356565b90600052602060002090601902016016016000828254611c1091906143fd565b90915550611c1f90508161294a565b80336001600160a01b031660118381548110611c3d57611c3d614356565b600091825260208220600160199092020101546040516001600160a01b03909116917fbfd436d24d21060f278a8b528282bc3a5bca811b5e108e411c10ca75d65f646791a450565b600060118581548110611c9a57611c9a614356565b6000918252602090912060199091020190506006601582015460ff166007811115611cc757611cc7613f69565b14611ce45760405162a3097160e01b815260040160405180910390fd5b60178101546001600160a01b03163314611d1157604051631cc191eb60e31b815260040160405180910390fd5b611d1d858585856122aa565b5050505050565b600e5460ff16611d475760405163ab35696f60e01b815260040160405180910390fd5b6004543414611d6957604051631036b5ad60e31b815260040160405180910390fd5b336000908152601060205260409020546001600160a01b0316611d8f57611d8f336127f4565b600f54600003611ebb5760118054600f81905560018101808355600083905290919082908110611dc157611dc1614356565b906000526020600020906019020160000181905550336011600f5481548110611dec57611dec614356565b906000526020600020906019020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550346011600f5481548110611e3757611e37614356565b600091825260208083206016601990930201919091019290925533808252601083526040808320600f8054600180840180548083018255908852888820019190915581546002909301805491820181558652958520909501559254925190917f9aa587534c85aa2ba48b98ff99fee0cc8eb86a8965d3f542170059a691760a9b91a3565b336011600f5481548110611ed157611ed1614356565b906000526020600020906019020160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550346011600f5481548110611f1c57611f1c614356565b90600052602060002090601902016016016000828254611f3c91906143fd565b90915550503360009081526010602090815260408220600f8054600180840180548083018255908752858720019190915581546002909301805491820181558552929093209091015554611f8f9061294a565b600f54336001600160a01b03166011600f5481548110611fb157611fb1614356565b600091825260208220600160199092020101546040516001600160a01b03909116917fb557d97ea9c1990e22ef70ef429658b7ee91548555170ee2e47762cf6382502291a46000600f55565b612005612223565b600855565b612012612223565b600955565b336001600160a01b03166011828154811061203457612034614356565b60009182526020909120600160199092020101546001600160a01b0316148015906120975750336001600160a01b03166011828154811061207757612077614356565b60009182526020909120600260199092020101546001600160a01b031614155b156120b557604051631794a8af60e11b815260040160405180910390fd5b6006601182815481106120ca576120ca614356565b600091825260209091206015601990920201015460ff1660078111156120f2576120f2613f69565b1461210f5760405162a3097160e01b815260040160405180910390fd5b600d546011828154811061212557612125614356565b90600052602060002090601902016018015442612142919061439b565b101561216157604051635ada9a9960e01b815260040160405180910390fd5b61216c816005612db5565b50565b612177612223565b600654604051339180156108fc02916000818181858888f193505050501580156121a5573d6000803e3d6000fd5b506000600655565b6121b5612223565b6001600160a01b03811661221a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016113fc565b61216c81612647565b6000546001600160a01b031633146112d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016113fc565b6000612288826133d3565b92915050565b600080808061229d86866133de565b9097909650945050505050565b6000601185815481106122bf576122bf614356565b600091825260208220600160199092020190810154601782015491935082916001600160a01b039182169116036122ff57505060038101600c820161230a565b5050600c8101600382015b600186600281111561231e5761231e613f69565b0361234657600182600301600101600082825461233b91906143ae565b9091555061237d9050565b600286600281111561235a5761235a613f69565b0361237d57600182600301600101600082825461237791906143d5565b90915550505b600185600281111561239157612391613f69565b036123b95760018260030160000160008282546123ae91906143ae565b909155506123f09050565b60028560028111156123cd576123cd613f69565b036123f05760018260030160000160008282546123ea91906143d5565b90915550505b600184600281111561240457612404613f69565b036124e657816005015460000361242e5760405163bab1d9e760e01b815260040160405180910390fd5b6001826005016000828254612443919061439b565b90915550506040805160a08101825260018085015460608301908152600280870154608085015290835283518085018552600380880154825260048089015460208481019190915280870193845260095497870197885260078a0180548088018255600091825290829020975180516005909202909801908155968101519587019590955591518051938601939093559190920151908301559151910155612591565b60028460028111156124fa576124fa613f69565b0361259157816006015460000361252457604051630adb358f60e11b815260040160405180910390fd5b6001826006016000828254612539919061439b565b9091555050604080516060810182526001808501546020808401918252600280880154958501959095529083526008860180548084018255600091825290829020935180519190950290930192835592909201519101555b61259a82613409565b6125a48383613448565b6125ae83836134ad565b6125bc838383600801613529565b6125ca8382846007016135f6565b426018840155600183015460178401546001600160a01b039182169116036126175760028301546017840180546001600160a01b0319166001600160a01b0390921691909117905561263e565b60018301546017840180546001600160a01b0319166001600160a01b039092169190911790555b50505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808212156126aa5761228882614410565b5090565b600080612710830286861082816126c7578888036126cb565b8789035b9050610466811061271e5760405162461bcd60e51b815260206004820152601b60248201527f526174696e6720646966666572656e636520746f6f206c61726765000000000060448201526064016113fc565b81156127755761032081106127755760405162461bcd60e51b815260206004820152601b60248201527f526174696e6720646966666572656e636520746f6f206c61726765000000000060448201526064016113fc565b60008060008060008661278c578561032001612792565b85610320035b94506127a4600a601987046001613a1d565b93506127af84613ada565b92508260640188816127c3576127c361442c565b0491508b8b0290508181109850886127dd578181036127e1565b8082035b9950505050505050505094509492505050565b6001600160a01b03818116600090815260106020526040902054161561282d57604051630ea075bf60e21b815260040160405180910390fd5b60408051610140810182526001600160a01b0383811680835283516000808252602080830187528086019283528651828152808201885286880152606086018290526080860182905260a0860182905260c0860182905260e086018290526104b061010087015261012086018290529281526010835294909420835181546001600160a01b031916931692909217825592518051929391926128d59260018501920190613d19565b50604082015180516128f1916002840191602090910190613d19565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120909101516009909101556112ad6001826104b0613af3565b60006011828154811061295f5761295f614356565b9060005260206000209060190201600301905060006011838154811061298757612987614356565b600091825260208220600c6019909202010191506129a6600243614442565b156129b3576000196129b6565b60015b9050601184815481106129cb576129cb614356565b600091825260209091206001601990920201015483546001600160a01b0319166001600160a01b039091161783556040805180820190915280612a0f83600f614456565b8152602001612a1e600f614410565b9052805160018501556020908101516002808601919091556040805180820190915260008082529201829052600385018290556004850182905560075460058601556008546006860155612a729042614442565b15612a7f57600019612a82565b60015b905060118581548110612a9757612a97614356565b600091825260209091206002601990920201015483546001600160a01b0319166001600160a01b039091161783556040805180820190915280612adb83600f614456565b8152600f6020918201528151600186015590810151600280860191909155604080518082019091526000808252920182905260038501829055600485019190915560075460058501556008546006850155612b369044614486565b600003612bc25760118581548110612b5057612b50614356565b906000526020600020906019020160010160009054906101000a90046001600160a01b031660118681548110612b8857612b88614356565b906000526020600020906019020160170160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550612c43565b60118581548110612bd557612bd5614356565b906000526020600020906019020160020160009054906101000a90046001600160a01b031660118681548110612c0d57612c0d614356565b906000526020600020906019020160170160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600660118681548110612c5857612c58614356565b60009182526020909120601560199092020101805460ff19166001836007811115612c8557612c85613f69565b02179055506000606460055460118881548110612ca457612ca4614356565b906000526020600020906019020160160154612cc0919061449a565b612cca91906144b1565b90508060066000828254612cde91906143fd565b925050819055508060118781548110612cf957612cf9614356565b90600052602060002090601902016016016000828254612d19919061439b565b925050819055508560118781548110612d3457612d34614356565b6000918252602090912060026019909202010154601180546001600160a01b039092169189908110612d6857612d68614356565b600091825260208220600160199092020101546040516001600160a01b03909116917fee0dca10a9957dad74da3fe318a3ccc561c46d96be0ab0b66e7aff32aab94cf391a4505050505050565b600060118381548110612dca57612dca614356565b90600052602060002090601902019050818160150160006101000a81548160ff02191690836007811115612e0057612e00613f69565b02179055506017810180546001600160a01b03191690556001826007811115612e2b57612e2b613f69565b03612eea5760028101546001600160a01b03166000908152601060205260408120600301805460019290612e609084906143fd565b90915550506001818101546001600160a01b031660009081526010602052604081206007018054909190612e959084906143fd565b9091555050601681018054600091829055600283015460405191926001600160a01b039091169183156108fc0291849190818181858888f19350505050158015612ee3573d6000803e3d6000fd5b50506132dc565b6002826007811115612efe57612efe613f69565b03612fc4576001818101546001600160a01b031660009081526010602052604081206003018054909190612f339084906143fd565b909155505060028101546001600160a01b03166000908152601060205260408120600701805460019290612f689084906143fd565b9091555050601681018054600091829055600183015460405191926001600160a01b039091169183156108fc0291849190818181858888f19350505050158015612fb6573d6000803e3d6000fd5b5050600060168201556132dc565b6003826007811115612fd857612fd8613f69565b036130d45760028101546001600160a01b0316600090815260106020526040812060040180546001929061300d9084906143fd565b90915550506001818101546001600160a01b0316600090815260106020526040812060050180549091906130429084906143fd565b909155505060168101805460009182905590606461306183604b61449a565b61306b91906144b1565b60028401546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156130a8573d6000803e3d6000fd5b506130b3818361439b565b915081600660008282546130c791906143fd565b909155506132dc92505050565b60048260078111156130e8576130e8613f69565b036131b8576001818101546001600160a01b03166000908152601060205260408120600401805490919061311d9084906143fd565b909155505060028101546001600160a01b031660009081526010602052604081206005018054600192906131529084906143fd565b909155505060168101805460009182905590606461317183604b61449a565b61317b91906144b1565b60018401546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156130a8573d6000803e3d6000fd5b60058260078111156131cc576131cc613f69565b036132dc576001818101546001600160a01b0316600090815260106020526040812060060180549091906132019084906143fd565b909155505060028101546001600160a01b031660009081526010602052604081206006018054600192906132369084906143fd565b9091555050601681018054600091829055906132536002836144b1565b60018401546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015613290573d6000803e3d6000fd5b5061329b818361439b565b60028401546040519193506001600160a01b03169083156108fc029084906000818181858888f193505050501580156132d8573d6000803e3d6000fd5b5050505b60018101546001600160a01b039081166000908152601060205260408082206008908101546002860154909416835290822001549091829161331f919086611300565b600180860180546001600160a01b03908116600090815260106020526040808220600890810188905560028b015484168352912001849055905493955091935061336c9290911684613af3565b506002830154613388906001906001600160a01b031683613af3565b506002830154600184015460405187926001600160a01b039081169216907fd13e8f06e2982264b04d30acdae3d74f4241e1dde5c38af5f6a38820d14348f590600090a45050505050565b600061228882613b11565b600080806133ec8585613b1b565b600081815260029690960160205260409095205494959350505050565b60038101546001820180546000906134229084906143d5565b909155505060048101546002820180546000906134409084906143d5565b909155505050565b601461345a8260010160000154612697565b1380613475575060146134738260010160010154612697565b135b156112ad57600182015481546001600160a01b039182169116036134a05781546112ad906003612db5565b81546112ad906004612db5565b600a6134f182600101604051806040016040529081600082015481526020016001820154815250506040518060400160405280600081526020016000815250613b2e565b116112ad57600182015481546001600160a01b0391821691160361351c5781546112ad906001612db5565b81546112ad906002612db5565b60005b81548110156135f057600a5460408051808201909152600185015481526002850154602082015283546135a1919085908590811061356c5761356c614356565b906000526020600020906002020160000160405180604001604052908160008201548152602001600182015481525050613b2e565b116135de57600184015483546001600160a01b039182169116036135d15783546135cc906001612db5565b6135de565b83546135de906002612db5565b806135e881614382565b91505061352c565b50505050565b60005b81548110156135f05781818154811061361457613614614356565b90600052602060002090600502016004015460000315613a0b57600182828154811061364257613642614356565b90600052602060002090600502016004016000828254613662919061439b565b92505081905550600082828154811061367d5761367d614356565b6000918252602090912060059091020154600185015461369d91906143ae565b905060008383815481106136b3576136b3614356565b600091825260209091206001600590920201015460028601546136d691906143ae565b905060008213156137235760018484815481106136f5576136f5614356565b9060005260206000209060050201600201600001600082825461371891906143d5565b909155506137699050565b600082121561376957600184848154811061374057613740614356565b9060005260206000209060050201600201600001600082825461376391906143ae565b90915550505b60008113156137b457600184848154811061378657613786614356565b906000526020600020906005020160020160010160008282546137a991906143d5565b909155506137fa9050565b60008112156137fa5760018484815481106137d1576137d1614356565b906000526020600020906005020160020160010160008282546137f491906143ae565b90915550505b83838154811061380c5761380c614356565b90600052602060002090600502016002016000015484848154811061383357613833614356565b9060005260206000209060050201600001600001600082825461385691906143d5565b9250508190555083838154811061386f5761386f614356565b90600052602060002090600502016002016001015484848154811061389657613896614356565b906000526020600020906005020160000160010160008282546138b991906143d5565b92505081905550600c546138fb86600101600001548686815481106138e0576138e0614356565b600091825260209091206005909102015461131391906143ae565b131580156139465750600c54613943866001016001015486868154811061392457613924614356565b90600052602060002090600502016000016001015461131391906143ae565b13155b1561398357600186015485546001600160a01b03918216911603613976578554613971906001612db5565b613983565b8554613983906002612db5565b600a6139d985858154811061399a5761399a614356565b60009182526020808320604080518082018252600590940290910180548452600101548383015280518082019091528381529081019290925290613b2e565b11613a085760008484815481106139f2576139f2614356565b9060005260206000209060050201600401819055505b50505b80613a1581614382565b9150506135f9565b6000838015613abd57600184168015613a3857859250613a3c565b8392505b508260011c8460011c94505b8415613ab7578560801c15613a5c57600080fd5b85860281810181811015613a6f57600080fd5b8590049650506001851615613aac578583028387820414613a95578615613a9557600080fd5b81810181811015613aa557600080fd5b8590049350505b8460011c9450613a48565b50610bd7565b838015613acd5760009250613ad1565b8392505b50509392505050565b6000612288613aee613aee613aee85613b62565b613b62565b6000613b09846001600160a01b03851684613c06565b949350505050565b6000612288825490565b6000613b278383613c23565b9392505050565b6000613b478260200151846020015161131391906143ae565b82518451613b5891611313916143ae565b613b2791906143d5565b60b581600160881b8110613b7b5760409190911b9060801c5b69010000000000000000008110613b975760209190911b9060401c5b650100000000008110613baf5760109190911b9060201c5b63010000008110613bc55760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b60008281526002840160205260408120829055613b098484613c4d565b6000826000018281548110613c3a57613c3a614356565b9060005260206000200154905092915050565b6000818152600183016020526040812054613b2790849084908490613c9e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612288565b506000612288565b6040518061012001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001613ce1613d60565b8152602001613cee613d60565b8152602001600081526020016000815260200160006001600160a01b03168152602001600081525090565b828054828255906000526020600020908101928215613d54579160200282015b82811115613d54578251825591602001919060010190613d39565b506126aa929150613ddc565b6040518060e0016040528060006001600160a01b03168152602001613d98604051806040016040528060008152602001600081525090565b8152602001613dba604051806040016040528060008152602001600081525090565b8152602001600081526020016000815260200160608152602001606081525090565b5b808211156126aa5760008155600101613ddd565b600060208284031215613e0357600080fd5b81356001600160a01b0381168114613b2757600080fd5b600081518084526020808501945080840160005b83811015613e5f57613e4c8783515180518252602090810151910152565b6040969096019590820190600101613e2e565b509495945050505050565b80516001600160a01b0316825260208082015180518285015280820151604085015260009161012091858301919050604085810151805160608901526020810151608089015250606086015160a08881019190915260808088015160c08a01528188015160e08a01969096528551948590526101408901958401949091906000905b80821015613f41578651613f0b89825180518252602090810151910152565b86810151613f25878b018280518252602090810151910152565b5085015188850152968201969585019560019190910190613eec565b5050505050505060c0830151848203610100860152613f608282613e1a565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b60088110613f9d57634e487b7160e01b600052602160045260246000fd5b9052565b6000610120825184526020830151613fc460208601826001600160a01b03169052565b506040830151613fdf60408601826001600160a01b03169052565b506060830151816060860152613ff782860182613e6a565b915050608083015184820360808601526140118282613e6a565b91505060a083015161402660a0860182613f7f565b5060c083015160c085015260e083015161404b60e08601826001600160a01b03169052565b50610100928301519390920192909252919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156140b557603f198886030184526140a3858351613fa1565b94509285019290850190600101614087565b5092979650505050505050565b6000602082840312156140d457600080fd5b5035919050565b8981526001600160a01b03898116602083015288811660408301526101206060830181905260009161410f8483018b613e6a565b91508382036080850152614123828a613e6a565b925061413260a0850189613f7f565b8660c085015280861660e08501525050826101008301529a9950505050505050505050565b602080825282518282018190526000919060409081850190868401855b828110156141a257815180516001600160a01b03168552860151868501529284019290850190600101614174565b5091979650505050505050565b600081518084526020808501945080840160005b83811015613e5f578151875295820195908201906001016141c3565b602081526141f96020820183516001600160a01b03169052565b600060208301516101408060408501526142176101608501836141af565b91506040850151601f1985840301606086015261423483826141af565b92505060608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151838701525050508091505092915050565b6000806000606084860312156142a557600080fd5b83359250602084013591506040840135600881106142c257600080fd5b809150509250925092565b602081526000613b276020830184613fa1565b6003811061216c57600080fd5b6000806000806080858703121561430357600080fd5b843593506020850135614315816142e0565b92506040850135614325816142e0565b91506060850135614335816142e0565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016143945761439461436c565b5060010190565b818103818111156122885761228861436c565b81810360008312801583831316838312821617156143ce576143ce61436c565b5092915050565b80820182811260008312801582168215821617156143f5576143f561436c565b505092915050565b808201808211156122885761228861436c565b6000600160ff1b82016144255761442561436c565b5060000390565b634e487b7160e01b600052601260045260246000fd5b6000826144515761445161442c565b500790565b80820260008212600160ff1b841416156144725761447261436c565b81810583148215176122885761228861436c565b6000826144955761449561442c565b500690565b80820281158282048414176122885761228861436c565b6000826144c0576144c061442c565b50049056fea2646970667358221220915be80b300729ab10b944394faf69bd42218bb530782c86adc472c79e813b2764736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80637f17b79d11610123578063c15e7e30116100ab578063d0399bb81161006f578063d0399bb8146105f7578063e2eb41ff14610617578063e941fa78146106c4578063f2fde38b146106d9578063f9d86073146106f957600080fd5b8063c15e7e3014610579578063c1699a9814610599578063c2e80b47146105a1578063cab896dc146105c1578063cd607b62146105d757600080fd5b80638da5cb5b116100f25780638da5cb5b146104de57806391c8767114610506578063a2f77bcc14610526578063b69667fe14610553578063bf8e91761461056657600080fd5b80637f17b79d1461045e5780637fd6f15c1461047e5780638456cb591461049457806384d2957e146104a957600080fd5b806356ce1175116101a657806367c5f6e51161017557806367c5f6e5146103dd5780636cc4b0b7146103fd5780636d64aa0614610413578063715018a6146104295780637ce3489b1461043e57600080fd5b806356ce1175146103645780635c12cd4b1461037a57806360b71d4e146103a757806364616253146103bd57600080fd5b806341b02d71116101ed57806341b02d71146102d457806346b9bfe4146102ea5780634f764e351461030c578063526aef4c1461032c578063544722af1461034e57600080fd5b806302fb0c5e1461021f5780630aa1b2661461024e578063117a5b901461027b5780633c6e43a9146102b0575b600080fd5b34801561022b57600080fd5b50600e546102399060ff1681565b60405190151581526020015b60405180910390f35b34801561025a57600080fd5b5061026e610269366004613df1565b61070f565b6040516102459190614060565b34801561028757600080fd5b5061029b6102963660046140c2565b610bdf565b604051610245999897969594939291906140db565b3480156102bc57600080fd5b506102c660075481565b604051908152602001610245565b3480156102e057600080fd5b506102c6600b5481565b3480156102f657600080fd5b5061030a6103053660046140c2565b610f3c565b005b34801561031857600080fd5b5061030a6103273660046140c2565b610f49565b34801561033857600080fd5b50610341610f56565b6040516102459190614157565b34801561035a57600080fd5b506102c6600a5481565b34801561037057600080fd5b506102c660085481565b34801561038657600080fd5b5061039a610395366004613df1565b611040565b60405161024591906141df565b3480156103b357600080fd5b506102c660065481565b3480156103c957600080fd5b5061030a6103d83660046140c2565b6111c7565b3480156103e957600080fd5b5061030a6103f83660046140c2565b6112b1565b34801561040957600080fd5b506102c6600d5481565b34801561041f57600080fd5b506102c6600c5481565b34801561043557600080fd5b5061030a6112be565b34801561044a57600080fd5b5061030a6104593660046140c2565b6112d2565b34801561046a57600080fd5b5061030a6104793660046140c2565b6112df565b34801561048a57600080fd5b506102c660055481565b3480156104a057600080fd5b5061030a6112ec565b3480156104b557600080fd5b506104c96104c4366004614290565b611300565b60408051928352602083019190915201610245565b3480156104ea57600080fd5b506000546040516001600160a01b039091168152602001610245565b34801561051257600080fd5b5061030a6105213660046140c2565b611484565b34801561053257600080fd5b506105466105413660046140c2565b611590565b60405161024591906142cd565b61030a610561366004613df1565b61194e565b61030a6105743660046140c2565b611b5f565b34801561058557600080fd5b5061030a6105943660046142ed565b611c85565b61030a611d24565b3480156105ad57600080fd5b5061030a6105bc3660046140c2565b611ffd565b3480156105cd57600080fd5b506102c660045481565b3480156105e357600080fd5b5061030a6105f23660046140c2565b61200a565b34801561060357600080fd5b5061030a6106123660046140c2565b612017565b34801561062357600080fd5b5061067f610632366004613df1565b601060205260009081526040902080546003820154600483015460058401546006850154600786015460088701546009909701546001600160a01b03909616969495939492939192909188565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610245565b3480156106d057600080fd5b5061030a61216f565b3480156106e557600080fd5b5061030a6106f4366004613df1565b6121ad565b34801561070557600080fd5b506102c660095481565b6001600160a01b038116600090815260106020908152604080832060010180548251818502810185019093528083526060949383018282801561077157602002820191906000526020600020905b81548152602001906001019080831161075d575b505050505090506000815167ffffffffffffffff81111561079457610794614340565b6040519080825280602002602001820160405280156107cd57816020015b6107ba613ca6565b8152602001906001900390816107b25790505b50905060005b8251811015610bd75760118382815181106107f0576107f0614356565b60200260200101518154811061080857610808614356565b60009182526020808320604080516101208101825260199094029091018054845260018101546001600160a01b03908116858501526002820154811685840152825160e0810184526003830180549092168152835180850185526004840154815260058401548187015281860152835180850185526006840154815260078401548187015281850152600883015460608281019190915260098401546080830152600a8401805486518189028101890190975280875297989497918901969295939460a08701949391929184015b828210156109465760008481526020908190206040805160a0810182526005860290920180546060840190815260018083015460808601529084528251808401845260028301548152600383015481870152848601526004909101549183019190915290835290920191016108d6565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156109bc57600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101610973565b5050509152505081526040805160e081018252600c840180546001600160a01b0316825282518084018452600d8601548152600e8601546020828101919091528381019190915283518085018552600f8701548152601087015481830152838501526011860154606084015260128601546080840152601386018054855181840281018401909652808652958201959394929360a08601939260009084015b82821015610acb5760008481526020908190206040805160a081018252600586029092018054606084019081526001808301546080860152908452825180840184526002830154815260038301548187015284860152600490910154918301919091529083529092019101610a5b565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610b4157600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101610af8565b505050915250508152601582015460209091019060ff166007811115610b6957610b69613f69565b6007811115610b7a57610b7a613f69565b81526016820154602082015260178201546001600160a01b031660408201526018909101546060909101528251839083908110610bb957610bb9614356565b60200260200101819052508080610bcf90614382565b9150506107d3565b509392505050565b60118181548110610bef57600080fd5b6000918252602080832060199092029091018054600182015460028301546040805160e0810182526003860180546001600160a01b03908116835283518085018552600489015481526005890154818b0152838a015283518085018552600689015481526007890154818b0152838501526008880154606084015260098801546080840152600a880180548551818c0281018c01909652808652979b50958116999416979195909460a0870194909284015b82821015610d115760008481526020908190206040805160a081018252600586029092018054606084019081526001808301546080860152908452825180840184526002830154815260038301548187015284860152600490910154918301919091529083529092019101610ca1565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610d8757600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101610d3e565b505050915250506040805160e081018252600c840180546001600160a01b0316825282518084018452600d8601548152600e8601546020828101919091528084019190915283518085018552600f87015481526010870154818301528385015260118601546060840152601286015460808401526013860180548551818402810184019096528086529596959394929360a08601939260009084015b82821015610e935760008481526020908190206040805160a081018252600586029092018054606084019081526001808301546080860152908452825180840184526002830154815260038301548187015284860152600490910154918301919091529083529092019101610e23565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b82821015610f0957600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101610ec0565b50505091525050601582015460168301546017840154601890940154929360ff9092169290916001600160a01b03169089565b610f44612223565b600b55565b610f51612223565b600a55565b60606000610f64600161227d565b67ffffffffffffffff811115610f7c57610f7c614340565b604051908082528060200260200182016040528015610fc157816020015b6040805180820190915260008082526020820152815260200190600190039081610f9a5790505b50905060005b610fd1600161227d565b81101561103a57600080610fe660018461228e565b915091506040518060400160405280836001600160a01b031681526020018281525084848151811061101a5761101a614356565b60200260200101819052505050808061103290614382565b915050610fc7565b50919050565b61109f60405180610140016040528060006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038083166000908152601060209081526040918290208251610140810184528154909416845260018101805484518185028101850190955280855291938584019390929083018282801561111957602002820191906000526020600020905b815481526020019060010190808311611105575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561117157602002820191906000526020600020905b81548152602001906001019080831161115d575b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b6000601182815481106111dc576111dc614356565b6000918252602090912060199091020190506006601582015460ff16600781111561120957611209613f69565b146112265760405162a3097160e01b815260040160405180910390fd5b60018101546001600160a01b03163314801590611250575060028101546001600160a01b03163314155b1561126e57604051631794a8af60e11b815260040160405180910390fd5b600d546018820154611280904261439b565b101561129f57604051635ada9a9960e01b815260040160405180910390fd5b6112ad8260008060006122aa565b5050565b6112b9612223565b600755565b6112c6612223565b6112d06000612647565b565b6112da612223565b600555565b6112e7612223565b600455565b6112f4612223565b600e805460ff19169055565b60008061032061131861131386886143ae565b612697565b131561132857508390508261147c565b6000600284600781111561133e5761133e613f69565b148061135b5750600484600781111561135957611359613f69565b145b1561136857506064611405565b600184600781111561137c5761137c613f69565b14806113995750600384600781111561139757611397613f69565b145b156113a657506000611405565b60058460078111156113ba576113ba613f69565b036113c757506032611405565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c995cdd5b1d60921b60448201526064015b60405180910390fd5b60008061141588888560016126ae565b91509150600080821561143f5761142c848b6143ae565b9150611438848a6143d5565b9050611458565b611449848b6143d5565b9150611455848a6143ae565b90505b600082121561146657600091505b6000811215611473575060005b90955093505050505b935093915050565b336001600160a01b0316601182815481106114a1576114a1614356565b60009182526020909120600260199092020101546001600160a01b0316146114df5760405163da271c6960e01b8152600481018290526024016113fc565b601181815481106114f2576114f2614356565b9060005260206000209060190201601601546006600082825461151591906143fd565b9250508190555060006011828154811061153157611531614356565b90600052602060002090601902016016018190555060076011828154811061155b5761155b614356565b60009182526020909120601560199092020101805460ff1916600183600781111561158857611588613f69565b021790555050565b611598613ca6565b601182815481106115ab576115ab614356565b60009182526020808320604080516101208101825260199094029091018054845260018101546001600160a01b03908116858501526002820154811685840152825160e0810184526003830180549092168152835180850185526004840154815260058401548187015281860152835180850185526006840154815260078401548187015281850152600883015460608281019190915260098401546080830152600a8401805486518189028101890190975280875297989497918901969295939460a08701949391929184015b828210156116e95760008481526020908190206040805160a081018252600586029092018054606084019081526001808301546080860152908452825180840184526002830154815260038301548187015284860152600490910154918301919091529083529092019101611679565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561175f57600084815260209081902060408051606081018252600286029092018054838501908152600191820154928401929092529082529083529092019101611716565b5050509152505081526040805160e081018252600c840180546001600160a01b0316825282518084018452600d8601548152600e8601546020828101919091528381019190915283518085018552600f8701548152601087015481830152838501526011860154606084015260128601546080840152601386018054855181840281018401909652808652958201959394929360a08601939260009084015b8282101561186e5760008481526020908190206040805160a0810182526005860290920180546060840190815260018083015460808601529084528251808401845260028301548152600383015481870152848601526004909101549183019190915290835290920191016117fe565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156118e45760008481526020908190206040805160608101825260028602909201805483850190815260019182015492840192909252908252908352909201910161189b565b505050915250508152601582015460209091019060ff16600781111561190c5761190c613f69565b600781111561191d5761191d613f69565b81526016820154602082015260178201546001600160a01b0316604082015260189091015460609091015292915050565b600e5460ff166119715760405163ab35696f60e01b815260040160405180910390fd5b600454341461199357604051631036b5ad60e31b815260040160405180910390fd5b336000908152601060205260409020546001600160a01b03166119b9576119b9336127f4565b6001600160a01b03818116600090815260106020526040902054166119e1576119e1816127f4565b601180546001810180835560008390529091829182908110611a0557611a05614356565b9060005260206000209060190201600001819055503360118281548110611a2e57611a2e614356565b906000526020600020906019020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160118281548110611a7757611a77614356565b906000526020600020906019020160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055503460118281548110611ac057611ac0614356565b600091825260208083206016601990930201919091019290925533808252601083526040808320600190810180548083018255908552858520018690556001600160a01b038716808552828520808301805480850182559087528787200188905560020180549283018155855294842001859055518493927f64104361ad73841dc20b552e4700f3f464329596092336a5e3c02d8862623b6691a45050565b6004543414611b8157604051631036b5ad60e31b815260040160405180910390fd5b336001600160a01b031660118281548110611b9e57611b9e614356565b60009182526020909120600260199092020101546001600160a01b031614611bdc5760405163da271c6960e01b8152600481018290526024016113fc565b3460118281548110611bf057611bf0614356565b90600052602060002090601902016016016000828254611c1091906143fd565b90915550611c1f90508161294a565b80336001600160a01b031660118381548110611c3d57611c3d614356565b600091825260208220600160199092020101546040516001600160a01b03909116917fbfd436d24d21060f278a8b528282bc3a5bca811b5e108e411c10ca75d65f646791a450565b600060118581548110611c9a57611c9a614356565b6000918252602090912060199091020190506006601582015460ff166007811115611cc757611cc7613f69565b14611ce45760405162a3097160e01b815260040160405180910390fd5b60178101546001600160a01b03163314611d1157604051631cc191eb60e31b815260040160405180910390fd5b611d1d858585856122aa565b5050505050565b600e5460ff16611d475760405163ab35696f60e01b815260040160405180910390fd5b6004543414611d6957604051631036b5ad60e31b815260040160405180910390fd5b336000908152601060205260409020546001600160a01b0316611d8f57611d8f336127f4565b600f54600003611ebb5760118054600f81905560018101808355600083905290919082908110611dc157611dc1614356565b906000526020600020906019020160000181905550336011600f5481548110611dec57611dec614356565b906000526020600020906019020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550346011600f5481548110611e3757611e37614356565b600091825260208083206016601990930201919091019290925533808252601083526040808320600f8054600180840180548083018255908852888820019190915581546002909301805491820181558652958520909501559254925190917f9aa587534c85aa2ba48b98ff99fee0cc8eb86a8965d3f542170059a691760a9b91a3565b336011600f5481548110611ed157611ed1614356565b906000526020600020906019020160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550346011600f5481548110611f1c57611f1c614356565b90600052602060002090601902016016016000828254611f3c91906143fd565b90915550503360009081526010602090815260408220600f8054600180840180548083018255908752858720019190915581546002909301805491820181558552929093209091015554611f8f9061294a565b600f54336001600160a01b03166011600f5481548110611fb157611fb1614356565b600091825260208220600160199092020101546040516001600160a01b03909116917fb557d97ea9c1990e22ef70ef429658b7ee91548555170ee2e47762cf6382502291a46000600f55565b612005612223565b600855565b612012612223565b600955565b336001600160a01b03166011828154811061203457612034614356565b60009182526020909120600160199092020101546001600160a01b0316148015906120975750336001600160a01b03166011828154811061207757612077614356565b60009182526020909120600260199092020101546001600160a01b031614155b156120b557604051631794a8af60e11b815260040160405180910390fd5b6006601182815481106120ca576120ca614356565b600091825260209091206015601990920201015460ff1660078111156120f2576120f2613f69565b1461210f5760405162a3097160e01b815260040160405180910390fd5b600d546011828154811061212557612125614356565b90600052602060002090601902016018015442612142919061439b565b101561216157604051635ada9a9960e01b815260040160405180910390fd5b61216c816005612db5565b50565b612177612223565b600654604051339180156108fc02916000818181858888f193505050501580156121a5573d6000803e3d6000fd5b506000600655565b6121b5612223565b6001600160a01b03811661221a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016113fc565b61216c81612647565b6000546001600160a01b031633146112d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016113fc565b6000612288826133d3565b92915050565b600080808061229d86866133de565b9097909650945050505050565b6000601185815481106122bf576122bf614356565b600091825260208220600160199092020190810154601782015491935082916001600160a01b039182169116036122ff57505060038101600c820161230a565b5050600c8101600382015b600186600281111561231e5761231e613f69565b0361234657600182600301600101600082825461233b91906143ae565b9091555061237d9050565b600286600281111561235a5761235a613f69565b0361237d57600182600301600101600082825461237791906143d5565b90915550505b600185600281111561239157612391613f69565b036123b95760018260030160000160008282546123ae91906143ae565b909155506123f09050565b60028560028111156123cd576123cd613f69565b036123f05760018260030160000160008282546123ea91906143d5565b90915550505b600184600281111561240457612404613f69565b036124e657816005015460000361242e5760405163bab1d9e760e01b815260040160405180910390fd5b6001826005016000828254612443919061439b565b90915550506040805160a08101825260018085015460608301908152600280870154608085015290835283518085018552600380880154825260048089015460208481019190915280870193845260095497870197885260078a0180548088018255600091825290829020975180516005909202909801908155968101519587019590955591518051938601939093559190920151908301559151910155612591565b60028460028111156124fa576124fa613f69565b0361259157816006015460000361252457604051630adb358f60e11b815260040160405180910390fd5b6001826006016000828254612539919061439b565b9091555050604080516060810182526001808501546020808401918252600280880154958501959095529083526008860180548084018255600091825290829020935180519190950290930192835592909201519101555b61259a82613409565b6125a48383613448565b6125ae83836134ad565b6125bc838383600801613529565b6125ca8382846007016135f6565b426018840155600183015460178401546001600160a01b039182169116036126175760028301546017840180546001600160a01b0319166001600160a01b0390921691909117905561263e565b60018301546017840180546001600160a01b0319166001600160a01b039092169190911790555b50505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808212156126aa5761228882614410565b5090565b600080612710830286861082816126c7578888036126cb565b8789035b9050610466811061271e5760405162461bcd60e51b815260206004820152601b60248201527f526174696e6720646966666572656e636520746f6f206c61726765000000000060448201526064016113fc565b81156127755761032081106127755760405162461bcd60e51b815260206004820152601b60248201527f526174696e6720646966666572656e636520746f6f206c61726765000000000060448201526064016113fc565b60008060008060008661278c578561032001612792565b85610320035b94506127a4600a601987046001613a1d565b93506127af84613ada565b92508260640188816127c3576127c361442c565b0491508b8b0290508181109850886127dd578181036127e1565b8082035b9950505050505050505094509492505050565b6001600160a01b03818116600090815260106020526040902054161561282d57604051630ea075bf60e21b815260040160405180910390fd5b60408051610140810182526001600160a01b0383811680835283516000808252602080830187528086019283528651828152808201885286880152606086018290526080860182905260a0860182905260c0860182905260e086018290526104b061010087015261012086018290529281526010835294909420835181546001600160a01b031916931692909217825592518051929391926128d59260018501920190613d19565b50604082015180516128f1916002840191602090910190613d19565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120909101516009909101556112ad6001826104b0613af3565b60006011828154811061295f5761295f614356565b9060005260206000209060190201600301905060006011838154811061298757612987614356565b600091825260208220600c6019909202010191506129a6600243614442565b156129b3576000196129b6565b60015b9050601184815481106129cb576129cb614356565b600091825260209091206001601990920201015483546001600160a01b0319166001600160a01b039091161783556040805180820190915280612a0f83600f614456565b8152602001612a1e600f614410565b9052805160018501556020908101516002808601919091556040805180820190915260008082529201829052600385018290556004850182905560075460058601556008546006860155612a729042614442565b15612a7f57600019612a82565b60015b905060118581548110612a9757612a97614356565b600091825260209091206002601990920201015483546001600160a01b0319166001600160a01b039091161783556040805180820190915280612adb83600f614456565b8152600f6020918201528151600186015590810151600280860191909155604080518082019091526000808252920182905260038501829055600485019190915560075460058501556008546006850155612b369044614486565b600003612bc25760118581548110612b5057612b50614356565b906000526020600020906019020160010160009054906101000a90046001600160a01b031660118681548110612b8857612b88614356565b906000526020600020906019020160170160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550612c43565b60118581548110612bd557612bd5614356565b906000526020600020906019020160020160009054906101000a90046001600160a01b031660118681548110612c0d57612c0d614356565b906000526020600020906019020160170160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600660118681548110612c5857612c58614356565b60009182526020909120601560199092020101805460ff19166001836007811115612c8557612c85613f69565b02179055506000606460055460118881548110612ca457612ca4614356565b906000526020600020906019020160160154612cc0919061449a565b612cca91906144b1565b90508060066000828254612cde91906143fd565b925050819055508060118781548110612cf957612cf9614356565b90600052602060002090601902016016016000828254612d19919061439b565b925050819055508560118781548110612d3457612d34614356565b6000918252602090912060026019909202010154601180546001600160a01b039092169189908110612d6857612d68614356565b600091825260208220600160199092020101546040516001600160a01b03909116917fee0dca10a9957dad74da3fe318a3ccc561c46d96be0ab0b66e7aff32aab94cf391a4505050505050565b600060118381548110612dca57612dca614356565b90600052602060002090601902019050818160150160006101000a81548160ff02191690836007811115612e0057612e00613f69565b02179055506017810180546001600160a01b03191690556001826007811115612e2b57612e2b613f69565b03612eea5760028101546001600160a01b03166000908152601060205260408120600301805460019290612e609084906143fd565b90915550506001818101546001600160a01b031660009081526010602052604081206007018054909190612e959084906143fd565b9091555050601681018054600091829055600283015460405191926001600160a01b039091169183156108fc0291849190818181858888f19350505050158015612ee3573d6000803e3d6000fd5b50506132dc565b6002826007811115612efe57612efe613f69565b03612fc4576001818101546001600160a01b031660009081526010602052604081206003018054909190612f339084906143fd565b909155505060028101546001600160a01b03166000908152601060205260408120600701805460019290612f689084906143fd565b9091555050601681018054600091829055600183015460405191926001600160a01b039091169183156108fc0291849190818181858888f19350505050158015612fb6573d6000803e3d6000fd5b5050600060168201556132dc565b6003826007811115612fd857612fd8613f69565b036130d45760028101546001600160a01b0316600090815260106020526040812060040180546001929061300d9084906143fd565b90915550506001818101546001600160a01b0316600090815260106020526040812060050180549091906130429084906143fd565b909155505060168101805460009182905590606461306183604b61449a565b61306b91906144b1565b60028401546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156130a8573d6000803e3d6000fd5b506130b3818361439b565b915081600660008282546130c791906143fd565b909155506132dc92505050565b60048260078111156130e8576130e8613f69565b036131b8576001818101546001600160a01b03166000908152601060205260408120600401805490919061311d9084906143fd565b909155505060028101546001600160a01b031660009081526010602052604081206005018054600192906131529084906143fd565b909155505060168101805460009182905590606461317183604b61449a565b61317b91906144b1565b60018401546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156130a8573d6000803e3d6000fd5b60058260078111156131cc576131cc613f69565b036132dc576001818101546001600160a01b0316600090815260106020526040812060060180549091906132019084906143fd565b909155505060028101546001600160a01b031660009081526010602052604081206006018054600192906132369084906143fd565b9091555050601681018054600091829055906132536002836144b1565b60018401546040519192506001600160a01b03169082156108fc029083906000818181858888f19350505050158015613290573d6000803e3d6000fd5b5061329b818361439b565b60028401546040519193506001600160a01b03169083156108fc029084906000818181858888f193505050501580156132d8573d6000803e3d6000fd5b5050505b60018101546001600160a01b039081166000908152601060205260408082206008908101546002860154909416835290822001549091829161331f919086611300565b600180860180546001600160a01b03908116600090815260106020526040808220600890810188905560028b015484168352912001849055905493955091935061336c9290911684613af3565b506002830154613388906001906001600160a01b031683613af3565b506002830154600184015460405187926001600160a01b039081169216907fd13e8f06e2982264b04d30acdae3d74f4241e1dde5c38af5f6a38820d14348f590600090a45050505050565b600061228882613b11565b600080806133ec8585613b1b565b600081815260029690960160205260409095205494959350505050565b60038101546001820180546000906134229084906143d5565b909155505060048101546002820180546000906134409084906143d5565b909155505050565b601461345a8260010160000154612697565b1380613475575060146134738260010160010154612697565b135b156112ad57600182015481546001600160a01b039182169116036134a05781546112ad906003612db5565b81546112ad906004612db5565b600a6134f182600101604051806040016040529081600082015481526020016001820154815250506040518060400160405280600081526020016000815250613b2e565b116112ad57600182015481546001600160a01b0391821691160361351c5781546112ad906001612db5565b81546112ad906002612db5565b60005b81548110156135f057600a5460408051808201909152600185015481526002850154602082015283546135a1919085908590811061356c5761356c614356565b906000526020600020906002020160000160405180604001604052908160008201548152602001600182015481525050613b2e565b116135de57600184015483546001600160a01b039182169116036135d15783546135cc906001612db5565b6135de565b83546135de906002612db5565b806135e881614382565b91505061352c565b50505050565b60005b81548110156135f05781818154811061361457613614614356565b90600052602060002090600502016004015460000315613a0b57600182828154811061364257613642614356565b90600052602060002090600502016004016000828254613662919061439b565b92505081905550600082828154811061367d5761367d614356565b6000918252602090912060059091020154600185015461369d91906143ae565b905060008383815481106136b3576136b3614356565b600091825260209091206001600590920201015460028601546136d691906143ae565b905060008213156137235760018484815481106136f5576136f5614356565b9060005260206000209060050201600201600001600082825461371891906143d5565b909155506137699050565b600082121561376957600184848154811061374057613740614356565b9060005260206000209060050201600201600001600082825461376391906143ae565b90915550505b60008113156137b457600184848154811061378657613786614356565b906000526020600020906005020160020160010160008282546137a991906143d5565b909155506137fa9050565b60008112156137fa5760018484815481106137d1576137d1614356565b906000526020600020906005020160020160010160008282546137f491906143ae565b90915550505b83838154811061380c5761380c614356565b90600052602060002090600502016002016000015484848154811061383357613833614356565b9060005260206000209060050201600001600001600082825461385691906143d5565b9250508190555083838154811061386f5761386f614356565b90600052602060002090600502016002016001015484848154811061389657613896614356565b906000526020600020906005020160000160010160008282546138b991906143d5565b92505081905550600c546138fb86600101600001548686815481106138e0576138e0614356565b600091825260209091206005909102015461131391906143ae565b131580156139465750600c54613943866001016001015486868154811061392457613924614356565b90600052602060002090600502016000016001015461131391906143ae565b13155b1561398357600186015485546001600160a01b03918216911603613976578554613971906001612db5565b613983565b8554613983906002612db5565b600a6139d985858154811061399a5761399a614356565b60009182526020808320604080518082018252600590940290910180548452600101548383015280518082019091528381529081019290925290613b2e565b11613a085760008484815481106139f2576139f2614356565b9060005260206000209060050201600401819055505b50505b80613a1581614382565b9150506135f9565b6000838015613abd57600184168015613a3857859250613a3c565b8392505b508260011c8460011c94505b8415613ab7578560801c15613a5c57600080fd5b85860281810181811015613a6f57600080fd5b8590049650506001851615613aac578583028387820414613a95578615613a9557600080fd5b81810181811015613aa557600080fd5b8590049350505b8460011c9450613a48565b50610bd7565b838015613acd5760009250613ad1565b8392505b50509392505050565b6000612288613aee613aee613aee85613b62565b613b62565b6000613b09846001600160a01b03851684613c06565b949350505050565b6000612288825490565b6000613b278383613c23565b9392505050565b6000613b478260200151846020015161131391906143ae565b82518451613b5891611313916143ae565b613b2791906143d5565b60b581600160881b8110613b7b5760409190911b9060801c5b69010000000000000000008110613b975760209190911b9060401c5b650100000000008110613baf5760109190911b9060201c5b63010000008110613bc55760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b60008281526002840160205260408120829055613b098484613c4d565b6000826000018281548110613c3a57613c3a614356565b9060005260206000200154905092915050565b6000818152600183016020526040812054613b2790849084908490613c9e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612288565b506000612288565b6040518061012001604052806000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001613ce1613d60565b8152602001613cee613d60565b8152602001600081526020016000815260200160006001600160a01b03168152602001600081525090565b828054828255906000526020600020908101928215613d54579160200282015b82811115613d54578251825591602001919060010190613d39565b506126aa929150613ddc565b6040518060e0016040528060006001600160a01b03168152602001613d98604051806040016040528060008152602001600081525090565b8152602001613dba604051806040016040528060008152602001600081525090565b8152602001600081526020016000815260200160608152602001606081525090565b5b808211156126aa5760008155600101613ddd565b600060208284031215613e0357600080fd5b81356001600160a01b0381168114613b2757600080fd5b600081518084526020808501945080840160005b83811015613e5f57613e4c8783515180518252602090810151910152565b6040969096019590820190600101613e2e565b509495945050505050565b80516001600160a01b0316825260208082015180518285015280820151604085015260009161012091858301919050604085810151805160608901526020810151608089015250606086015160a08881019190915260808088015160c08a01528188015160e08a01969096528551948590526101408901958401949091906000905b80821015613f41578651613f0b89825180518252602090810151910152565b86810151613f25878b018280518252602090810151910152565b5085015188850152968201969585019560019190910190613eec565b5050505050505060c0830151848203610100860152613f608282613e1a565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b60088110613f9d57634e487b7160e01b600052602160045260246000fd5b9052565b6000610120825184526020830151613fc460208601826001600160a01b03169052565b506040830151613fdf60408601826001600160a01b03169052565b506060830151816060860152613ff782860182613e6a565b915050608083015184820360808601526140118282613e6a565b91505060a083015161402660a0860182613f7f565b5060c083015160c085015260e083015161404b60e08601826001600160a01b03169052565b50610100928301519390920192909252919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156140b557603f198886030184526140a3858351613fa1565b94509285019290850190600101614087565b5092979650505050505050565b6000602082840312156140d457600080fd5b5035919050565b8981526001600160a01b03898116602083015288811660408301526101206060830181905260009161410f8483018b613e6a565b91508382036080850152614123828a613e6a565b925061413260a0850189613f7f565b8660c085015280861660e08501525050826101008301529a9950505050505050505050565b602080825282518282018190526000919060409081850190868401855b828110156141a257815180516001600160a01b03168552860151868501529284019290850190600101614174565b5091979650505050505050565b600081518084526020808501945080840160005b83811015613e5f578151875295820195908201906001016141c3565b602081526141f96020820183516001600160a01b03169052565b600060208301516101408060408501526142176101608501836141af565b91506040850151601f1985840301606086015261423483826141af565b92505060608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151838701525050508091505092915050565b6000806000606084860312156142a557600080fd5b83359250602084013591506040840135600881106142c257600080fd5b809150509250925092565b602081526000613b276020830184613fa1565b6003811061216c57600080fd5b6000806000806080858703121561430357600080fd5b843593506020850135614315816142e0565b92506040850135614325816142e0565b91506060850135614335816142e0565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016143945761439461436c565b5060010190565b818103818111156122885761228861436c565b81810360008312801583831316838312821617156143ce576143ce61436c565b5092915050565b80820182811260008312801582168215821617156143f5576143f561436c565b505092915050565b808201808211156122885761228861436c565b6000600160ff1b82016144255761442561436c565b5060000390565b634e487b7160e01b600052601260045260246000fd5b6000826144515761445161442c565b500790565b80820260008212600160ff1b841416156144725761447261436c565b81810583148215176122885761228861436c565b6000826144955761449561442c565b500690565b80820281158282048414176122885761228861436c565b6000826144c0576144c061442c565b50049056fea2646970667358221220915be80b300729ab10b944394faf69bd42218bb530782c86adc472c79e813b2764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2405,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "addressToELO",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressToUintMap)900_storage"
      },
      {
        "astId": 2408,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "gameCost",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2411,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "feePercent",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2414,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "feeBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2417,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "maxTorpedoes",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2420,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "maxMines",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2423,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "torpedoFuel",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2426,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "mineRange",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2429,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "torpedoAccel",
        "offset": 0,
        "slot": "11",
        "type": "t_int256"
      },
      {
        "astId": 2432,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "torpedoRange",
        "offset": 0,
        "slot": "12",
        "type": "t_int256"
      },
      {
        "astId": 2439,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "turnTimeout",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2442,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "active",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2445,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "openGameId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2450,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "players",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(Player)2545_storage)"
      },
      {
        "astId": 2454,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "games",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_struct(Game)2522_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Game)2522_storage)dyn_storage": {
        "base": "t_struct(Game)2522_storage",
        "encoding": "dynamic_array",
        "label": "struct TheThirdLaw.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Mine)2579_storage)dyn_storage": {
        "base": "t_struct(Mine)2579_storage",
        "encoding": "dynamic_array",
        "label": "struct TheThirdLaw.Mine[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Torpedo)2575_storage)dyn_storage": {
        "base": "t_struct(Torpedo)2575_storage",
        "encoding": "dynamic_array",
        "label": "struct TheThirdLaw.Torpedo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Status)2396": {
        "encoding": "inplace",
        "label": "enum Status",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Player)2545_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TheThirdLaw.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)2545_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressToUintMap)900_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 899,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)150_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)1597_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1596,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1403_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)150_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 145,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)1597_storage"
          },
          {
            "astId": 149,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Game)2522_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Game",
        "members": [
          {
            "astId": 2502,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2504,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player1Address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2506,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player2Address",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2509,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player1Ship",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Ship)2566_storage"
          },
          {
            "astId": 2512,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player2Ship",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Ship)2566_storage"
          },
          {
            "astId": 2515,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "status",
            "offset": 0,
            "slot": "21",
            "type": "t_enum(Status)2396"
          },
          {
            "astId": 2517,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "value",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 2519,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "currentPlayer",
            "offset": 0,
            "slot": "23",
            "type": "t_address"
          },
          {
            "astId": 2521,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "lastTurnTimestamp",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "800"
      },
      "t_struct(Mine)2579_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Mine",
        "members": [
          {
            "astId": 2578,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Position)2584_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Player)2545_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Player",
        "members": [
          {
            "astId": 2524,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2527,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "gameIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2530,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "inviteIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2532,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "victories",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2534,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "defaultVictories",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2536,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "defaultLosses",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2538,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "draws",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2540,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "losses",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2542,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "eloRating",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2544,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "currentShipId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Position)2584_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Position",
        "members": [
          {
            "astId": 2581,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 2583,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "col",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1403_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1398,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1402,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Ship)2566_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Ship",
        "members": [
          {
            "astId": 2547,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2550,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Position)2584_storage"
          },
          {
            "astId": 2553,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "velocity",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Velocity)2589_storage"
          },
          {
            "astId": 2555,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingTorpedoes",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2557,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingMines",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2561,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "torpedoes",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Torpedo)2575_storage)dyn_storage"
          },
          {
            "astId": 2565,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "mines",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Mine)2579_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Torpedo)2575_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Torpedo",
        "members": [
          {
            "astId": 2569,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Position)2584_storage"
          },
          {
            "astId": 2572,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "velocity",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Velocity)2589_storage"
          },
          {
            "astId": 2574,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingFuel",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Velocity)2589_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Velocity",
        "members": [
          {
            "astId": 2586,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 2588,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "col",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}