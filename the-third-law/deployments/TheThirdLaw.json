{
  "address": "0xf9a015C475fA703f1c600A4233DAF2783D99e2D0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughMines",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTorpedoes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "NotInvited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourTurn",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "GameOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "InviteToGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "JoinGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "OpenGameCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player1Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "OpenGameJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "acceptInvite",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "endGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player1Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2Address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Velocity",
              "name": "velocity",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "remainingTorpedoes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingMines",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingFuel",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TheThirdLaw.Torpedo[]",
              "name": "torpedoes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TheThirdLaw.Mine[]",
              "name": "mines",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TheThirdLaw.Ship",
          "name": "player1Ship",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Position",
              "name": "position",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "row",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "col",
                  "type": "int256"
                }
              ],
              "internalType": "struct TheThirdLaw.Velocity",
              "name": "velocity",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "remainingTorpedoes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingMines",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingFuel",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TheThirdLaw.Torpedo[]",
              "name": "torpedoes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TheThirdLaw.Mine[]",
              "name": "mines",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TheThirdLaw.Ship",
          "name": "player2Ship",
          "type": "tuple"
        },
        {
          "internalType": "enum Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currentPlayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastTurnTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2Address",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player1Ship",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player2Ship",
              "type": "tuple"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentPlayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "getGamesForPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "player1Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "player2Address",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player1Ship",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "ownerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Position",
                  "name": "position",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "row",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "col",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Velocity",
                  "name": "velocity",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingTorpedoes",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingMines",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Velocity",
                      "name": "velocity",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingFuel",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Torpedo[]",
                  "name": "torpedoes",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "int256",
                          "name": "row",
                          "type": "int256"
                        },
                        {
                          "internalType": "int256",
                          "name": "col",
                          "type": "int256"
                        }
                      ],
                      "internalType": "struct TheThirdLaw.Position",
                      "name": "position",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct TheThirdLaw.Mine[]",
                  "name": "mines",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct TheThirdLaw.Ship",
              "name": "player2Ship",
              "type": "tuple"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentPlayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTurnTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerAddress",
          "type": "address"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ownerAddress",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "inviteIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "victories",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defaultVictories",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defaultLosses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "draws",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "losses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eloRating",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentShipId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TheThirdLaw.Player",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player2Address",
          "type": "address"
        }
      ],
      "name": "inviteToGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMines",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTorpedoes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mineRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "victories",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defaultVictories",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defaultLosses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "draws",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "losses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "eloRating",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentShipId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        }
      ],
      "name": "rejectInvite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameCost",
          "type": "uint256"
        }
      ],
      "name": "setGameCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mineRange",
          "type": "uint256"
        }
      ],
      "name": "setMineRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMines",
          "type": "uint256"
        }
      ],
      "name": "setNumberMines",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTorpedoes",
          "type": "uint256"
        }
      ],
      "name": "setNumberTorpedoes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_torpedoAccel",
          "type": "int256"
        }
      ],
      "name": "setTorpedoAccel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_torpedoFuel",
          "type": "uint256"
        }
      ],
      "name": "setTorpedoFuel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum LeftOrRight",
          "name": "_leftOrRight",
          "type": "uint8"
        },
        {
          "internalType": "enum UpOrDown",
          "name": "_upOrDown",
          "type": "uint8"
        },
        {
          "internalType": "enum Action",
          "name": "_action",
          "type": "uint8"
        }
      ],
      "name": "takeTurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "torpedoAccel",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "torpedoFuel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turnTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x41ffe77ad28bb80068bba65de6e58797c7f814102903a31cb41911fd2efbe17b",
  "receipt": {
    "to": null,
    "from": "0xac5b774D7a700AcDb528048B6052bc1549cd73B9",
    "contractAddress": "0xf9a015C475fA703f1c600A4233DAF2783D99e2D0",
    "transactionIndex": 1,
    "gasUsed": "3416996",
    "logsBloom": "0x
    "blockHash": "0xa9e1012e0649d3204d34861f77c126b3fc361b7d509047ca0478065dd110aa02",
    "transactionHash": "0x41ffe77ad28bb80068bba65de6e58797c7f814102903a31cb41911fd2efbe17b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8585922,
        "transactionHash": "0x41ffe77ad28bb80068bba65de6e58797c7f814102903a31cb41911fd2efbe17b",
        "address": "0xf9a015C475fA703f1c600A4233DAF2783D99e2D0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ac5b774d7a700acdb528048b6052bc1549cd73b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa9e1012e0649d3204d34861f77c126b3fc361b7d509047ca0478065dd110aa02"
      }
    ],
    "blockNumber": 8585922,
    "cumulativeGasUsed": "3480949",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "2b9630fe6c24e9422dd757adde312e68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughMines\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTorpedoes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"NotInvited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourGame\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourTurn\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"GameOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"InviteToGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"JoinGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"OpenGameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player1Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"OpenGameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"acceptInvite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getGamesForPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player1Ship\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingTorpedoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingMines\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Velocity\",\"name\":\"velocity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"remainingFuel\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Torpedo[]\",\"name\":\"torpedoes\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"row\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"col\",\"type\":\"int256\"}],\"internalType\":\"struct TheThirdLaw.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"internalType\":\"struct TheThirdLaw.Mine[]\",\"name\":\"mines\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TheThirdLaw.Ship\",\"name\":\"player2Ship\",\"type\":\"tuple\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentPlayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTurnTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Game[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inviteIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"victories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultVictories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eloRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentShipId\",\"type\":\"uint256\"}],\"internalType\":\"struct TheThirdLaw.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player2Address\",\"type\":\"address\"}],\"name\":\"inviteToGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTorpedoes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"victories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultVictories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eloRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentShipId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"rejectInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameCost\",\"type\":\"uint256\"}],\"name\":\"setGameCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mineRange\",\"type\":\"uint256\"}],\"name\":\"setMineRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMines\",\"type\":\"uint256\"}],\"name\":\"setNumberMines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTorpedoes\",\"type\":\"uint256\"}],\"name\":\"setNumberTorpedoes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_torpedoAccel\",\"type\":\"int256\"}],\"name\":\"setTorpedoAccel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_torpedoFuel\",\"type\":\"uint256\"}],\"name\":\"setTorpedoFuel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum LeftOrRight\",\"name\":\"_leftOrRight\",\"type\":\"uint8\"},{\"internalType\":\"enum UpOrDown\",\"name\":\"_upOrDown\",\"type\":\"uint8\"},{\"internalType\":\"enum Action\",\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"takeTurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torpedoAccel\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torpedoFuel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TheThirdLaw.sol\":\"TheThirdLaw\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TheThirdLaw.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror ContractPaused();\\nerror NotEnoughFunds();\\nerror NotEnoughTorpedoes();\\nerror NotEnoughMines();\\nerror NotYourTurn();\\nerror NotYourGame();\\nerror GameNotActive();\\nerror AlreadyRegistered();\\nerror NotRegistered(address _playerAddress);\\nerror NotInvited(uint _gameId);\\n\\nint constant QUADRANT_SIZE = 30;\\nint constant START_DISTANCE = 20;\\nuint constant ASTEROID_SIZE = 10; // Manhattan distance\\n\\nenum LeftOrRight {\\n    None,\\n    Left,\\n    Right\\n}\\n\\nenum UpOrDown {\\n    None,\\n    Up,\\n    Down\\n}\\n\\nenum Action {\\n    None,\\n    FireTorpedo,\\n    DropMine\\n}\\n\\nenum Status {\\n    NotStarted,\\n    Player1Destroyed,\\n    Player2Destroyed,\\n    Player1Fled,\\n    Player2Fled,\\n    Draw,\\n    Active,\\n    Over\\n}\\n\\ncontract TheThirdLaw is Ownable {\\n    uint public gameCost = 0.001 ether;\\n    uint public feePercent = 10;\\n    uint public feeBalance = 0;\\n\\n    uint public maxTorpedoes = 5;\\n    uint public maxMines = 5;\\n    uint public torpedoFuel = 10;\\n    uint public mineRange = 2;\\n    int public torpedoAccel = 3;\\n\\n    // 5 minutes in milliseconds\\n    uint public turnTimeout = 5 * 60 * 1000;\\n\\n    bool public active = true;\\n\\n    // Super savvy players can find this and use it to decide whether or not\\n    // to join an open game\\n    uint openGameId = 0;\\n\\n    // If a miner wants to manipulate a block just to go first or pick start\\n    // that's fine.\\n    uint insecureSeed = 8291981;\\n\\n    mapping(address => Player) public players;\\n\\n    Game[] public games;\\n\\n    event InviteToGame(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n    event JoinGame(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event OpenGameCreated(\\n        address indexed _player1Address,\\n        uint indexed _gameId\\n    );\\n    event OpenGameJoined(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event GameStarted(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    event GameOver(\\n        address indexed _player1Address,\\n        address indexed _player2Address,\\n        uint indexed _gameId\\n    );\\n\\n    struct Game {\\n        uint id;\\n        address player1Address;\\n        address player2Address;\\n        Ship player1Ship;\\n        Ship player2Ship;\\n        Status status;\\n        uint value; // Amount to be paid to victor, or split if there is a tie\\n        address currentPlayer; // Set to None if game not started or is over\\n        uint lastTurnTimestamp;\\n    }\\n\\n    struct Player {\\n        address ownerAddress;\\n        uint[] gameIds;\\n        uint[] inviteIds;\\n        uint victories; // Enemy was destroyed\\n        uint defaultVictories; // Enemy was forced to flee\\n        uint defaultLosses; // Player was forced to flee\\n        uint draws; // Both players ran out of weapons\\n        uint losses; // Player was destroyed\\n        uint eloRating;\\n        uint currentShipId;\\n    }\\n\\n    struct Ship {\\n        address ownerAddress;\\n        Position position;\\n        Velocity velocity;\\n        uint remainingTorpedoes;\\n        uint remainingMines;\\n        Torpedo[] torpedoes; // Added this line\\n        Mine[] mines; // Added this line\\n    }\\n\\n    struct Torpedo {\\n        Position position;\\n        Velocity velocity;\\n        uint remainingFuel;\\n    }\\n\\n    struct Mine {\\n        Position position;\\n    }\\n\\n    struct Position {\\n        int row;\\n        int col;\\n    }\\n\\n    struct Velocity {\\n        int row;\\n        int col;\\n    }\\n\\n    constructor() {\\n        games.push();\\n    }\\n\\n    // PUBLIC\\n\\n    function inviteToGame(address _player2Address) public payable isActive {\\n        if (msg.value != gameCost) revert NotEnoughFunds();\\n\\n        if (players[msg.sender].ownerAddress == address(0)) {\\n            _registerPlayer();\\n        }\\n\\n        uint gameId = games.length;\\n        games.push();\\n        games[gameId].id = gameId;\\n        games[gameId].player1Address = msg.sender;\\n        games[gameId].player2Address = _player2Address;\\n        games[gameId].value = msg.value;\\n        players[msg.sender].gameIds.push(gameId);\\n        players[_player2Address].gameIds.push(gameId);\\n        players[_player2Address].inviteIds.push(gameId); // TODO: This is probably not the best way to handle this\\n\\n        emit InviteToGame(msg.sender, _player2Address, gameId);\\n    }\\n\\n    function acceptInvite(uint _gameId) public payable {\\n        if (msg.value != gameCost) revert NotEnoughFunds();\\n\\n        if (players[msg.sender].ownerAddress == address(0)) {\\n            _registerPlayer();\\n        }\\n\\n        if (games[_gameId].player2Address != msg.sender)\\n            revert NotInvited(_gameId);\\n\\n        games[_gameId].value += msg.value;\\n\\n        _startGame(_gameId);\\n\\n        emit JoinGame(games[_gameId].player1Address, msg.sender, _gameId);\\n    }\\n\\n    // Prevent spam by refunding the inviter's fee to the game contract if\\n    // the invite is rejected.\\n    function rejectInvite(uint _gameId) public {\\n        if (games[_gameId].player2Address != msg.sender)\\n            revert NotInvited(_gameId);\\n\\n        feeBalance += games[_gameId].value;\\n        games[_gameId].value = 0;\\n\\n        games[_gameId].status = Status.Over;\\n    }\\n\\n    function takeTurn(\\n        uint _gameId,\\n        LeftOrRight _leftOrRight,\\n        UpOrDown _upOrDown,\\n        Action _action\\n    ) public {\\n        Game storage game = games[_gameId];\\n\\n        if (game.status != Status.Active) revert GameNotActive();\\n        if (game.currentPlayer != msg.sender) revert NotYourTurn();\\n\\n        Ship storage ship;\\n        Ship storage enemyShip;\\n\\n        if (game.currentPlayer == game.player1Address) {\\n            ship = game.player1Ship;\\n            enemyShip = game.player2Ship;\\n        } else {\\n            ship = game.player2Ship;\\n            enemyShip = game.player1Ship;\\n        }\\n\\n        if (_leftOrRight == LeftOrRight.Left) {\\n            ship.velocity.col -= 1;\\n        } else if (_leftOrRight == LeftOrRight.Right) {\\n            ship.velocity.col += 1;\\n        }\\n\\n        if (_upOrDown == UpOrDown.Up) {\\n            ship.velocity.row -= 1;\\n        } else if (_upOrDown == UpOrDown.Down) {\\n            ship.velocity.row += 1;\\n        }\\n\\n        if (_action == Action.FireTorpedo) {\\n            if (ship.remainingTorpedoes == 0) revert NotEnoughTorpedoes();\\n            ship.remainingTorpedoes -= 1;\\n            ship.torpedoes.push(\\n                Torpedo(\\n                    Position(ship.position.row, ship.position.col),\\n                    Velocity(ship.velocity.row, ship.velocity.col),\\n                    torpedoFuel\\n                )\\n            );\\n        } else if (_action == Action.DropMine) {\\n            if (ship.remainingMines == 0) revert NotEnoughMines();\\n            ship.remainingMines -= 1;\\n            ship.mines.push(\\n                Mine(Position(ship.position.row, ship.position.col))\\n            );\\n        }\\n\\n        _moveShip(ship);\\n        _checkForFleeingBoard(game, ship);\\n        _checkForAsteroidCollision(game, ship);\\n        _checkForMineCollision(game, ship, enemyShip.mines);\\n        _moveTorpedoesTowardsEnemy(game, enemyShip, ship.torpedoes);\\n        game.lastTurnTimestamp = block.timestamp;\\n\\n        // Switch the current player\\n        if (game.currentPlayer == game.player1Address) {\\n            game.currentPlayer = game.player2Address;\\n        } else {\\n            game.currentPlayer = game.player1Address;\\n        }\\n    }\\n\\n    // If it's been 5 minutes since the last player's turn, then either player\\n    // can end the game in a draw\\n\\n    function endGame(uint _gameId) public {\\n        // Only one of the players in the game can call this function\\n        if (\\n            games[_gameId].player1Address != msg.sender &&\\n            games[_gameId].player2Address != msg.sender\\n        ) revert NotYourGame();\\n\\n        _endGame(_gameId, Status.Draw);\\n    }\\n\\n    // If it's been 5 minutes since the last player's turn, the other player\\n    // can force their opponent to move with no input\\n    // TODO: CRITICAL\\n\\n    // INTERNAL\\n\\n    function _moveShip(Ship storage _ship) internal {\\n        _ship.position.row += _ship.velocity.row;\\n        _ship.position.col += _ship.velocity.col;\\n    }\\n\\n    function _moveTorpedoesTowardsEnemy(\\n        Game storage _game,\\n        Ship storage _enemyShip,\\n        Torpedo[] storage _torpedoes\\n    ) internal {\\n        for (uint i = 0; i < _torpedoes.length; i++) {\\n            if (_torpedoes[i].remainingFuel == 0) {\\n                continue;\\n            } else {\\n                _torpedoes[i].remainingFuel -= 1;\\n                Position memory nextTorpedoPosition = Position(\\n                    _torpedoes[i].position.row + _torpedoes[i].velocity.row,\\n                    _torpedoes[i].position.col + _torpedoes[i].velocity.col\\n                );\\n                // If the nextTorpedoPosition is within torpedoAccel of the enemy ship,\\n                // then the torpedo has hit the enemy ship and the game is over.\\n                // We have to check row and col separately because the movement is\\n                // constrained to torpedoAccel in each direction.\\n                if (\\n                    abs(nextTorpedoPosition.row - _enemyShip.position.row) <=\\n                    torpedoAccel &&\\n                    abs(nextTorpedoPosition.col - _enemyShip.position.col) <=\\n                    torpedoAccel\\n                ) {\\n                    // This player has hit the enemy ship and won\\n                    if (_enemyShip.ownerAddress == _game.player1Address) {\\n                        _endGame(_game.id, Status.Player1Destroyed);\\n                    } else {\\n                        _endGame(_game.id, Status.Player2Destroyed);\\n                    }\\n                }\\n\\n                // Otherwise, change the nextTorpedoPosition's row and col\\n                // by a maximun of torpedoAccel in each direction so that it's\\n                // as close to the enemy ship as possible\\n\\n                // First, check if the torpedo is above or below the enemy ship\\n\\n                // If the torpedo is above the enemy ship, then the torpedo's\\n                // row should be decreased by a maximum of torpedoAccel\\n                if (nextTorpedoPosition.row < _enemyShip.position.row) {\\n                    if (\\n                        nextTorpedoPosition.row + torpedoAccel <\\n                        _enemyShip.position.row\\n                    ) {\\n                        nextTorpedoPosition.row += torpedoAccel;\\n                    } else {\\n                        nextTorpedoPosition.row = _enemyShip.position.row;\\n                    }\\n                }\\n                // If the torpedo is below the enemy ship, then the torpedo's\\n                // row should be increased by a maximum of torpedoAccel\\n                else if (nextTorpedoPosition.row > _enemyShip.position.row) {\\n                    if (\\n                        nextTorpedoPosition.row - torpedoAccel >\\n                        _enemyShip.position.row\\n                    ) {\\n                        nextTorpedoPosition.row -= torpedoAccel;\\n                    } else {\\n                        nextTorpedoPosition.row = _enemyShip.position.row;\\n                    }\\n                }\\n\\n                // Next, check if the torpedo is to the left or right of the enemy ship\\n\\n                // If the torpedo is to the left of the enemy ship, then the torpedo's\\n                // col should be decreased by a maximum of torpedoAccel\\n                if (nextTorpedoPosition.col < _enemyShip.position.col) {\\n                    if (\\n                        nextTorpedoPosition.col + torpedoAccel <\\n                        _enemyShip.position.col\\n                    ) {\\n                        nextTorpedoPosition.col += torpedoAccel;\\n                    } else {\\n                        nextTorpedoPosition.col = _enemyShip.position.col;\\n                    }\\n                }\\n                // If the torpedo is to the right of the enemy ship, then the torpedo's\\n                // col should be increased by a maximum of torpedoAccel\\n                else if (nextTorpedoPosition.col > _enemyShip.position.col) {\\n                    if (\\n                        nextTorpedoPosition.col - torpedoAccel >\\n                        _enemyShip.position.col\\n                    ) {\\n                        nextTorpedoPosition.col -= torpedoAccel;\\n                    } else {\\n                        nextTorpedoPosition.col = _enemyShip.position.col;\\n                    }\\n                }\\n\\n                // Update the torpedo's velocity to match the acceleration changes\\n                _torpedoes[i].velocity = Velocity(\\n                    nextTorpedoPosition.row - _torpedoes[i].position.row,\\n                    nextTorpedoPosition.col - _torpedoes[i].position.col\\n                );\\n\\n                _torpedoes[i].position = nextTorpedoPosition;\\n\\n                // If the torpedo has hit an asteroid, then the torpedo is destroyed\\n                if (\\n                    _manhattanDistance(nextTorpedoPosition, Position(0, 0)) <=\\n                    ASTEROID_SIZE\\n                ) {\\n                    _torpedoes[i].remainingFuel = 0;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkForAsteroidCollision(\\n        Game storage _game,\\n        Ship storage _ship\\n    ) internal {\\n        if (\\n            _manhattanDistance(_ship.position, Position(0, 0)) <= ASTEROID_SIZE\\n        ) {\\n            // This player has hit an asteroid and lost\\n            if (_ship.ownerAddress == _game.player1Address) {\\n                _endGame(_game.id, Status.Player1Destroyed);\\n            } else {\\n                _endGame(_game.id, Status.Player2Destroyed);\\n            }\\n        }\\n    }\\n\\n    function _checkForMineCollision(\\n        Game storage _game,\\n        Ship storage _ship,\\n        Mine[] storage _enemyMines\\n    ) internal {\\n        for (uint i = 0; i < _enemyMines.length; i++) {\\n            if (\\n                _manhattanDistance(_ship.position, _enemyMines[i].position) <=\\n                mineRange\\n            ) {\\n                // This player has hit a mine and lost\\n                if (_ship.ownerAddress == _game.player1Address) {\\n                    _endGame(_game.id, Status.Player1Destroyed);\\n                } else {\\n                    _endGame(_game.id, Status.Player2Destroyed);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkForFleeingBoard(\\n        Game storage _game,\\n        Ship storage _ship\\n    ) internal {\\n        if (\\n            abs(_ship.position.row) > QUADRANT_SIZE ||\\n            abs(_ship.position.col) > QUADRANT_SIZE\\n        ) {\\n            // This player has fled the board and lost\\n            if (_ship.ownerAddress == _game.player1Address) {\\n                _endGame(_game.id, Status.Player1Fled);\\n            } else {\\n                _endGame(_game.id, Status.Player2Fled);\\n            }\\n        }\\n    }\\n\\n    // THIS MUST BE AUDITED!!!\\n    function _endGame(uint _gameId, Status _status) internal {\\n        Game storage game = games[_gameId];\\n        game.status = _status;\\n        game.currentPlayer = address(0);\\n\\n        if (_status == Status.Player1Destroyed) {\\n            players[game.player2Address].victories += 1;\\n            players[game.player1Address].losses += 1;\\n\\n            // Pay the victor\\n            uint payout = game.value;\\n            game.value = 0;\\n            payable(game.player2Address).transfer(payout);\\n        } else if (_status == Status.Player2Destroyed) {\\n            players[game.player1Address].victories += 1;\\n            players[game.player2Address].losses += 1;\\n\\n            // Pay the victor\\n            uint payout = game.value;\\n            game.value = 0;\\n            payable(game.player1Address).transfer(payout);\\n            game.value = 0;\\n        } else if (_status == Status.Player1Fled) {\\n            players[game.player2Address].defaultVictories += 1;\\n            players[game.player1Address].defaultLosses += 1;\\n\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay the victor 75% of the game value\\n            uint payout = (balance * 75) / 100;\\n            payable(game.player2Address).transfer(payout);\\n            balance -= payout;\\n\\n            // Add the remaining 25% to the contract's fee balance\\n            feeBalance += balance;\\n        } else if (_status == Status.Player2Fled) {\\n            players[game.player1Address].defaultVictories += 1;\\n            players[game.player2Address].defaultLosses += 1;\\n\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay the victor 75% of the game value\\n            uint payout = (balance * 75) / 100;\\n            payable(game.player1Address).transfer(payout);\\n            balance -= payout;\\n\\n            // Add the remaining 25% to the contract's fee balance\\n            feeBalance += balance;\\n        } else if (_status == Status.Draw) {\\n            players[game.player1Address].draws += 1;\\n            players[game.player2Address].draws += 1;\\n\\n            // Split the game value between the players\\n            uint balance = game.value;\\n            game.value = 0;\\n            // Pay each player 50% of the game value\\n            uint payout = balance / 2;\\n            payable(game.player1Address).transfer(payout);\\n            balance -= payout;\\n            payable(game.player2Address).transfer(balance);\\n        }\\n\\n        emit GameOver(game.player1Address, game.player2Address, _gameId);\\n    }\\n\\n    function _registerPlayer() internal {\\n        if (players[msg.sender].ownerAddress != address(0))\\n            revert AlreadyRegistered();\\n        players[msg.sender] = Player(\\n            msg.sender,\\n            new uint[](0),\\n            new uint[](0),\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1200,\\n            0\\n        );\\n    }\\n\\n    function _startGame(uint _gameId) internal {\\n        Ship storage player1Ship = games[_gameId].player1Ship;\\n        Ship storage player2Ship = games[_gameId].player2Ship;\\n\\n        // Player 1 starts on left side, can be top or bottom\\n        // They start on the top if the block number is even and on the bottom if it's odd\\n        int player1Row = int(block.number) % 2 == 0 ? int(1) : -1;\\n\\n        player1Ship.ownerAddress = games[_gameId].player1Address;\\n        player1Ship.position = Position(\\n            START_DISTANCE * player1Row,\\n            -START_DISTANCE\\n        );\\n        player1Ship.velocity = Velocity(0, 0);\\n        player1Ship.remainingTorpedoes = maxTorpedoes;\\n        player1Ship.remainingMines = maxMines;\\n\\n        // Player 2 starts on right side, can be top or bottom, based on timestamp\\n        int player2Row = int(block.timestamp) % 2 == 0 ? int(1) : -1;\\n\\n        player2Ship.ownerAddress = games[_gameId].player2Address;\\n        player2Ship.position = Position(\\n            START_DISTANCE * player2Row,\\n            START_DISTANCE\\n        );\\n        player2Ship.velocity = Velocity(0, 0);\\n        player2Ship.remainingTorpedoes = maxTorpedoes;\\n        player2Ship.remainingMines = maxMines;\\n\\n        // Assuming torpedoes and mines arrays start empty, there's no need to initialize them\\n\\n        // Flip a coin and set the starting player\\n        if (block.prevrandao % 2 == 0) {\\n            games[_gameId].currentPlayer = games[_gameId].player1Address;\\n        } else {\\n            games[_gameId].currentPlayer = games[_gameId].player2Address;\\n        }\\n\\n        games[_gameId].status = Status.Active;\\n\\n        // Take the fee from the game value and add it to the contract's fee balance\\n        uint fee = (games[_gameId].value * feePercent) / 100;\\n        feeBalance += fee;\\n        games[_gameId].value -= fee;\\n\\n        emit GameStarted(\\n            games[_gameId].player1Address,\\n            games[_gameId].player2Address,\\n            _gameId\\n        );\\n    }\\n\\n    // UTILS\\n\\n    function _manhattanDistance(\\n        Position memory _position1,\\n        Position memory _position2\\n    ) internal pure returns (uint) {\\n        return\\n            uint(\\n                abs(_position1.row - _position2.row) +\\n                    abs(_position1.col - _position2.col)\\n            );\\n    }\\n\\n    function abs(int _x) internal pure returns (int) {\\n        if (_x < 0) {\\n            return -_x;\\n        } else {\\n            return _x;\\n        }\\n    }\\n\\n    // VIEWS\\n\\n    // TODO: Do these need some kind of pagination?\\n    // function getGames() public view returns (Game[] memory) {\\n    //     return games;\\n    // }\\n\\n    function getGamesForPlayer(\\n        address _playerAddress\\n    ) public view returns (Game[] memory) {\\n        uint[] memory gameIds = players[_playerAddress].gameIds;\\n        Game[] memory playerGames = new Game[](gameIds.length);\\n        for (uint i = 0; i < gameIds.length; i++) {\\n            playerGames[i] = games[gameIds[i]];\\n        }\\n        return playerGames;\\n    }\\n\\n    function getPlayer(\\n        address _playerAddress\\n    ) public view returns (Player memory) {\\n        return players[_playerAddress];\\n    }\\n\\n    function getGame(uint _gameId) public view returns (Game memory) {\\n        return games[_gameId];\\n    }\\n\\n    // MODIFIERS\\n\\n    modifier isActive() {\\n        if (!active) revert ContractPaused();\\n        _;\\n    }\\n\\n    // ADMIN\\n\\n    function setGameCost(uint _gameCost) public onlyOwner {\\n        gameCost = _gameCost;\\n    }\\n\\n    function setFeePercent(uint _feePercent) public onlyOwner {\\n        feePercent = _feePercent;\\n    }\\n\\n    function setNumberTorpedoes(uint _maxTorpedoes) public onlyOwner {\\n        maxTorpedoes = _maxTorpedoes;\\n    }\\n\\n    function setNumberMines(uint _maxMines) public onlyOwner {\\n        maxMines = _maxMines;\\n    }\\n\\n    function setTorpedoFuel(uint _torpedoFuel) public onlyOwner {\\n        torpedoFuel = _torpedoFuel;\\n    }\\n\\n    function setMineRange(uint _mineRange) public onlyOwner {\\n        mineRange = _mineRange;\\n    }\\n\\n    function setTorpedoAccel(int _torpedoAccel) public onlyOwner {\\n        torpedoAccel = _torpedoAccel;\\n    }\\n\\n    function pause() public onlyOwner {\\n        active = false;\\n    }\\n\\n    function withdrawFee() public onlyOwner {\\n        payable(msg.sender).transfer(feeBalance);\\n        feeBalance = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0d0d9edef540cb6a2adb0bdd23da6310e291683afaa9c82713de66a59564d4cb\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 197,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "gameCost",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 200,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "feePercent",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 203,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "feeBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 206,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "maxTorpedoes",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 209,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "maxMines",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 212,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "torpedoFuel",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 215,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "mineRange",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 218,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "torpedoAccel",
        "offset": 0,
        "slot": "8",
        "type": "t_int256"
      },
      {
        "astId": 225,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "turnTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 228,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "active",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 231,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "openGameId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 234,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "insecureSeed",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 239,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "players",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Player)334_storage)"
      },
      {
        "astId": 243,
        "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
        "label": "games",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(Game)311_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)311_storage)dyn_storage": {
        "base": "t_struct(Game)311_storage",
        "encoding": "dynamic_array",
        "label": "struct TheThirdLaw.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Mine)368_storage)dyn_storage": {
        "base": "t_struct(Mine)368_storage",
        "encoding": "dynamic_array",
        "label": "struct TheThirdLaw.Mine[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Torpedo)364_storage)dyn_storage": {
        "base": "t_struct(Torpedo)364_storage",
        "encoding": "dynamic_array",
        "label": "struct TheThirdLaw.Torpedo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)192": {
        "encoding": "inplace",
        "label": "enum Status",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Player)334_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TheThirdLaw.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)334_storage"
      },
      "t_struct(Game)311_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Game",
        "members": [
          {
            "astId": 291,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 293,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player1Address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 295,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player2Address",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 298,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player1Ship",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Ship)355_storage"
          },
          {
            "astId": 301,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "player2Ship",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Ship)355_storage"
          },
          {
            "astId": 304,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "status",
            "offset": 0,
            "slot": "21",
            "type": "t_enum(Status)192"
          },
          {
            "astId": 306,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "value",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 308,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "currentPlayer",
            "offset": 0,
            "slot": "23",
            "type": "t_address"
          },
          {
            "astId": 310,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "lastTurnTimestamp",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "800"
      },
      "t_struct(Mine)368_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Mine",
        "members": [
          {
            "astId": 367,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Position)373_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Player)334_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Player",
        "members": [
          {
            "astId": 313,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 316,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "gameIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 319,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "inviteIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 321,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "victories",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 323,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "defaultVictories",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 325,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "defaultLosses",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 327,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "draws",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 329,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "losses",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 331,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "eloRating",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 333,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "currentShipId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Position)373_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Position",
        "members": [
          {
            "astId": 370,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 372,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "col",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Ship)355_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Ship",
        "members": [
          {
            "astId": 336,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 339,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Position)373_storage"
          },
          {
            "astId": 342,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "velocity",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Velocity)378_storage"
          },
          {
            "astId": 344,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingTorpedoes",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 346,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingMines",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 350,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "torpedoes",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Torpedo)364_storage)dyn_storage"
          },
          {
            "astId": 354,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "mines",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Mine)368_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Torpedo)364_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Torpedo",
        "members": [
          {
            "astId": 358,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Position)373_storage"
          },
          {
            "astId": 361,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "velocity",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Velocity)378_storage"
          },
          {
            "astId": 363,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "remainingFuel",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Velocity)378_storage": {
        "encoding": "inplace",
        "label": "struct TheThirdLaw.Velocity",
        "members": [
          {
            "astId": 375,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "row",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 377,
            "contract": "contracts/TheThirdLaw.sol:TheThirdLaw",
            "label": "col",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}